
c:/Users/Vishal/Documents/CTDProjects/LAB13/target/3.0.0/argon/LAB13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003364  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7380  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e550  000d7384  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000238  2003e5b8  2003e5b8  0002e5b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d73ec  000d73ec  000273ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7414  000d7414  00027414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c9b8d  00000000  00000000  00027418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a27f  00000000  00000000  001f0fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b17a  00000000  00000000  0020b224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cd0  00000000  00000000  0024639e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000092e0  00000000  00000000  0024906e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ecbf  00000000  00000000  0025234e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046b0d  00000000  00000000  0029100d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128289  00000000  00000000  002d7b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000805c  00000000  00000000  003ffda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 faed 	bl	d660c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 faf5 	bl	d6628 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e550 	.word	0x2003e550
   d4048:	000d7384 	.word	0x000d7384
   d404c:	2003e5b8 	.word	0x2003e5b8
   d4050:	2003e5b8 	.word	0x2003e5b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fee7 	bl	d5e30 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7354 	.word	0x000d7354
   d407c:	000d7378 	.word	0x000d7378

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b834 	b.w	d40ec <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f859 	bl	d413c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 be91 	b.w	d5db4 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 bc63 	b.w	d595c <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 bc69 	b.w	d596c <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fbbe 	bl	d5824 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d55a5 	.word	0x000d55a5

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_Z3isrv>:
int interuptCount = 0;
volatile bool interruptOccured = false;

void isr()
{
  interruptOccured = false;
   d40c0:	4b04      	ldr	r3, [pc, #16]	; (d40d4 <_Z3isrv+0x14>)
   d40c2:	2200      	movs	r2, #0
   d40c4:	701a      	strb	r2, [r3, #0]
  if (interuptCount % 2 != 0)
   d40c6:	4a04      	ldr	r2, [pc, #16]	; (d40d8 <_Z3isrv+0x18>)
   d40c8:	6812      	ldr	r2, [r2, #0]
   d40ca:	07d2      	lsls	r2, r2, #31
  {
    interruptOccured = true;
   d40cc:	bf44      	itt	mi
   d40ce:	2201      	movmi	r2, #1
   d40d0:	701a      	strbmi	r2, [r3, #0]
  }
}
   d40d2:	4770      	bx	lr
   d40d4:	2003e63c 	.word	0x2003e63c
   d40d8:	2003e640 	.word	0x2003e640

000d40dc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40dc:	b510      	push	{r4, lr}
   d40de:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40e0:	6800      	ldr	r0, [r0, #0]
   d40e2:	b108      	cbz	r0, d40e8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40e4:	f001 fc42 	bl	d596c <free>
class SystemClass {
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd10      	pop	{r4, pc}

000d40ec <setup>:

void setup()
{
   d40ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pinMode(D5, INPUT);                // Counter button
   d40ee:	2100      	movs	r1, #0
   d40f0:	2005      	movs	r0, #5
   d40f2:	f002 f9f5 	bl	d64e0 <pinMode>
  pinMode(D6, INPUT_PULLUP);         // defaults to HIGH
  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr

  display.setup();
   d40f6:	4c0f      	ldr	r4, [pc, #60]	; (d4134 <setup+0x48>)
  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr
   d40f8:	2500      	movs	r5, #0
  pinMode(D6, INPUT_PULLUP);         // defaults to HIGH
   d40fa:	2102      	movs	r1, #2
   d40fc:	2006      	movs	r0, #6
   d40fe:	f002 f9ef 	bl	d64e0 <pinMode>
  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr
   d4102:	f04f 33ff 	mov.w	r3, #4294967295
   d4106:	2202      	movs	r2, #2
   d4108:	490b      	ldr	r1, [pc, #44]	; (d4138 <setup+0x4c>)
   d410a:	9500      	str	r5, [sp, #0]
   d410c:	2006      	movs	r0, #6
   d410e:	f001 ffbd 	bl	d608c <_Z15attachInterrupttPFvvE13InterruptModeah>
  display.setup();
   d4112:	4620      	mov	r0, r4
   d4114:	f000 fcec 	bl	d4af0 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4118:	4620      	mov	r0, r4
   d411a:	f000 fef5 	bl	d4f08 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d411e:	2101      	movs	r1, #1
   d4120:	4620      	mov	r0, r4
   d4122:	f000 fc96 	bl	d4a52 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4126:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d412a:	6125      	str	r5, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d412c:	6163      	str	r3, [r4, #20]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
}
   d412e:	b003      	add	sp, #12
   d4130:	bd30      	pop	{r4, r5, pc}
   d4132:	bf00      	nop
   d4134:	2003e5cc 	.word	0x2003e5cc
   d4138:	000d40c1 	.word	0x000d40c1

000d413c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d413c:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   d413e:	4d1d      	ldr	r5, [pc, #116]	; (d41b4 <loop+0x78>)
   d4140:	4628      	mov	r0, r5
   d4142:	f000 fcfe 	bl	d4b42 <_ZN16OledWingAdafruit4loopEv>
  if (!interruptOccured)
   d4146:	4b1c      	ldr	r3, [pc, #112]	; (d41b8 <loop+0x7c>)
   d4148:	781b      	ldrb	r3, [r3, #0]
   d414a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   d414e:	bb0b      	cbnz	r3, d4194 <loop+0x58>
  {
    if (digitalRead(D5))
   d4150:	2005      	movs	r0, #5
   d4152:	f002 f9ef 	bl	d6534 <digitalRead>
   d4156:	b1e8      	cbz	r0, d4194 <loop+0x58>
    {
      count++;
   d4158:	4c18      	ldr	r4, [pc, #96]	; (d41bc <loop+0x80>)
   d415a:	6823      	ldr	r3, [r4, #0]
      display.clearDisplay();
   d415c:	4628      	mov	r0, r5
      count++;
   d415e:	3301      	adds	r3, #1
   d4160:	6023      	str	r3, [r4, #0]
      display.clearDisplay();
   d4162:	f000 fed1 	bl	d4f08 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d4166:	2101      	movs	r1, #1
   d4168:	4628      	mov	r0, r5
   d416a:	f000 fc72 	bl	d4a52 <_ZN12Adafruit_GFX11setTextSizeEh>
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.print(count);
   d416e:	6824      	ldr	r4, [r4, #0]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4170:	612e      	str	r6, [r5, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4172:	f04f 1301 	mov.w	r3, #65537	; 0x10001
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4176:	2c00      	cmp	r4, #0
   d4178:	616b      	str	r3, [r5, #20]
   d417a:	da18      	bge.n	d41ae <loop+0x72>
            t = print('-');
   d417c:	212d      	movs	r1, #45	; 0x2d
   d417e:	4628      	mov	r0, r5
   d4180:	f001 fd68 	bl	d5c54 <_ZN5Print5printEc>
            val = -n;
   d4184:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4186:	480b      	ldr	r0, [pc, #44]	; (d41b4 <loop+0x78>)
   d4188:	220a      	movs	r2, #10
   d418a:	f001 fd72 	bl	d5c72 <_ZN5Print11printNumberEmh>
      display.display();
   d418e:	4809      	ldr	r0, [pc, #36]	; (d41b4 <loop+0x78>)
   d4190:	f001 f926 	bl	d53e0 <_ZN16Adafruit_SSD13067displayEv>
    }
  }
  if(digitalRead(D6)){
   d4194:	2006      	movs	r0, #6
   d4196:	f002 f9cd 	bl	d6534 <digitalRead>
   d419a:	b118      	cbz	r0, d41a4 <loop+0x68>
    interuptCount++;
   d419c:	4a08      	ldr	r2, [pc, #32]	; (d41c0 <loop+0x84>)
   d419e:	6813      	ldr	r3, [r2, #0]
   d41a0:	3301      	adds	r3, #1
   d41a2:	6013      	str	r3, [r2, #0]
  }
  delay(200);
   d41a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(200);
   d41a8:	20c8      	movs	r0, #200	; 0xc8
   d41aa:	f001 bdc9 	b.w	d5d40 <delay>
            val = n;
   d41ae:	4621      	mov	r1, r4
   d41b0:	e7e9      	b.n	d4186 <loop+0x4a>
   d41b2:	bf00      	nop
   d41b4:	2003e5cc 	.word	0x2003e5cc
   d41b8:	2003e63c 	.word	0x2003e63c
   d41bc:	2003e5c8 	.word	0x2003e5c8
   d41c0:	2003e640 	.word	0x2003e640

000d41c4 <_GLOBAL__sub_I_SystemMode>:
   d41c4:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d41c6:	4c0f      	ldr	r4, [pc, #60]	; (d4204 <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d41c8:	4b0f      	ldr	r3, [pc, #60]	; (d4208 <_GLOBAL__sub_I_SystemMode+0x44>)
   d41ca:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d41cc:	2500      	movs	r5, #0
   d41ce:	6025      	str	r5, [r4, #0]
   d41d0:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d41d2:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41d4:	2003      	movs	r0, #3
   d41d6:	f001 fb2d 	bl	d5834 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d41da:	4a0c      	ldr	r2, [pc, #48]	; (d420c <_GLOBAL__sub_I_SystemMode+0x48>)
   d41dc:	490c      	ldr	r1, [pc, #48]	; (d4210 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d41de:	4620      	mov	r0, r4
OledWingAdafruit display;
   d41e0:	4c0c      	ldr	r4, [pc, #48]	; (d4214 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d41e2:	f002 f9fb 	bl	d65dc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d41e6:	4629      	mov	r1, r5
   d41e8:	2001      	movs	r0, #1
   d41ea:	f001 fb33 	bl	d5854 <system_thread_set_state>
OledWingAdafruit display;
   d41ee:	2107      	movs	r1, #7
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fc4f 	bl	d4a94 <_ZN16OledWingAdafruitC1Ei>
   d41f6:	4620      	mov	r0, r4
   d41f8:	4a04      	ldr	r2, [pc, #16]	; (d420c <_GLOBAL__sub_I_SystemMode+0x48>)
   d41fa:	4907      	ldr	r1, [pc, #28]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x54>)
   d41fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d4200:	f002 b9ec 	b.w	d65dc <__aeabi_atexit>
   d4204:	2003e5bc 	.word	0x2003e5bc
   d4208:	ffff0000 	.word	0xffff0000
   d420c:	2003e5b8 	.word	0x2003e5b8
   d4210:	000d40dd 	.word	0x000d40dd
   d4214:	2003e5cc 	.word	0x2003e5cc
   d4218:	000d4a61 	.word	0x000d4a61

000d421c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d421c:	4770      	bx	lr

000d421e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d421e:	b510      	push	{r4, lr}
  }
   d4220:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4222:	4604      	mov	r4, r0
  }
   d4224:	f002 f9df 	bl	d65e6 <_ZdlPvj>
   d4228:	4620      	mov	r0, r4
   d422a:	bd10      	pop	{r4, pc}

000d422c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d422c:	b40e      	push	{r1, r2, r3}
   d422e:	b503      	push	{r0, r1, lr}
   d4230:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4232:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4234:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4238:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d423a:	f001 fd38 	bl	d5cae <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d423e:	b002      	add	sp, #8
   d4240:	f85d eb04 	ldr.w	lr, [sp], #4
   d4244:	b003      	add	sp, #12
   d4246:	4770      	bx	lr

000d4248 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4248:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d424a:	4604      	mov	r4, r0
   d424c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d424e:	7922      	ldrb	r2, [r4, #4]
   d4250:	68a3      	ldr	r3, [r4, #8]
   d4252:	b132      	cbz	r2, d4262 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4254:	b9a3      	cbnz	r3, d4280 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4256:	490b      	ldr	r1, [pc, #44]	; (d4284 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4258:	b002      	add	sp, #8
   d425a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d425e:	f001 bcf5 	b.w	d5c4c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4262:	4a09      	ldr	r2, [pc, #36]	; (d4288 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4264:	7b26      	ldrb	r6, [r4, #12]
   d4266:	4d09      	ldr	r5, [pc, #36]	; (d428c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4268:	4909      	ldr	r1, [pc, #36]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d426a:	7b64      	ldrb	r4, [r4, #13]
   d426c:	2e01      	cmp	r6, #1
   d426e:	bf18      	it	ne
   d4270:	4629      	movne	r1, r5
   d4272:	e9cd 1400 	strd	r1, r4, [sp]
   d4276:	4907      	ldr	r1, [pc, #28]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4278:	f7ff ffd8 	bl	d422c <_ZN5Print6printfEPKcz>
  }
   d427c:	b002      	add	sp, #8
   d427e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4280:	4a05      	ldr	r2, [pc, #20]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4282:	e7ef      	b.n	d4264 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4284:	000d66b5 	.word	0x000d66b5
   d4288:	000d66ac 	.word	0x000d66ac
   d428c:	000d66b1 	.word	0x000d66b1
   d4290:	000d66ad 	.word	0x000d66ad
   d4294:	000d66cb 	.word	0x000d66cb
   d4298:	000d66a4 	.word	0x000d66a4

000d429c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42a0:	b085      	sub	sp, #20
   d42a2:	461f      	mov	r7, r3
   d42a4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d42a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d42ac:	eba8 0902 	sub.w	r9, r8, r2
   d42b0:	eba7 0a01 	sub.w	sl, r7, r1
   d42b4:	f1b9 0f00 	cmp.w	r9, #0
   d42b8:	bfb8      	it	lt
   d42ba:	f1c9 0900 	rsblt	r9, r9, #0
   d42be:	f1ba 0f00 	cmp.w	sl, #0
   d42c2:	bfb8      	it	lt
   d42c4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d42c8:	45d1      	cmp	r9, sl
        uint16_t color) {
   d42ca:	4683      	mov	fp, r0
   d42cc:	460c      	mov	r4, r1
   d42ce:	4615      	mov	r5, r2
    if (steep) {
   d42d0:	dd04      	ble.n	d42dc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d42d2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d42d4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d42d6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d42d8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d42da:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d42dc:	42bc      	cmp	r4, r7
   d42de:	dd05      	ble.n	d42ec <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d42e0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d42e2:	4645      	mov	r5, r8
   d42e4:	4690      	mov	r8, r2
    if (x0 > x1) {
   d42e6:	4622      	mov	r2, r4
   d42e8:	463c      	mov	r4, r7
   d42ea:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d42ec:	1b3e      	subs	r6, r7, r4
   d42ee:	b2b2      	uxth	r2, r6
   d42f0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d42f2:	eba8 0205 	sub.w	r2, r8, r5
   d42f6:	2a00      	cmp	r2, #0
   d42f8:	bfb8      	it	lt
   d42fa:	4252      	neglt	r2, r2
   d42fc:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d42fe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4302:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4306:	4545      	cmp	r5, r8
   d4308:	bfb4      	ite	lt
   d430a:	2201      	movlt	r2, #1
   d430c:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4310:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4312:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4314:	42bc      	cmp	r4, r7
   d4316:	dc1c      	bgt.n	d4352 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4318:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d431c:	9303      	str	r3, [sp, #12]
        if (steep) {
   d431e:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4320:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4324:	bfc7      	ittee	gt
   d4326:	4629      	movgt	r1, r5
   d4328:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d432a:	462a      	movle	r2, r5
   d432c:	4621      	movle	r1, r4
   d432e:	4658      	mov	r0, fp
   d4330:	47c0      	blx	r8
        }
        err -= dy;
   d4332:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4334:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4336:	1ab6      	subs	r6, r6, r2
   d4338:	b2b1      	uxth	r1, r6
   d433a:	b236      	sxth	r6, r6
        if (err < 0) {
   d433c:	2e00      	cmp	r6, #0
   d433e:	da05      	bge.n	d434c <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4340:	9a02      	ldr	r2, [sp, #8]
   d4342:	4415      	add	r5, r2
            err += dx;
   d4344:	9a00      	ldr	r2, [sp, #0]
   d4346:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4348:	b22d      	sxth	r5, r5
            err += dx;
   d434a:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d434c:	3401      	adds	r4, #1
   d434e:	b224      	sxth	r4, r4
   d4350:	e7e0      	b.n	d4314 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4352:	b005      	add	sp, #20
   d4354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4358 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4358:	4770      	bx	lr

000d435a <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d435a:	b410      	push	{r4}
    drawPixel(x, y, color);
   d435c:	6804      	ldr	r4, [r0, #0]
   d435e:	6924      	ldr	r4, [r4, #16]
   d4360:	46a4      	mov	ip, r4
}
   d4362:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4366:	4760      	bx	ip

000d4368 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4368:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d436a:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d436c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4370:	9502      	str	r5, [sp, #8]
   d4372:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4374:	46a4      	mov	ip, r4
}
   d4376:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4378:	4760      	bx	ip

000d437a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d437a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d437c:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d437e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4382:	9502      	str	r5, [sp, #8]
   d4384:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4386:	46a4      	mov	ip, r4
}
   d4388:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d438a:	4760      	bx	ip

000d438c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d438c:	b470      	push	{r4, r5, r6}
   d438e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4392:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4396:	6804      	ldr	r4, [r0, #0]
   d4398:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d439c:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d439e:	46a4      	mov	ip, r4
}
   d43a0:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d43a2:	4760      	bx	ip

000d43a4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43a8:	461c      	mov	r4, r3
    startWrite();
   d43aa:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d43ac:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43b0:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d43b2:	4605      	mov	r5, r0
   d43b4:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d43b6:	3c01      	subs	r4, #1
   d43b8:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d43ba:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d43bc:	b224      	sxth	r4, r4
    startWrite();
   d43be:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d43c0:	682b      	ldr	r3, [r5, #0]
   d43c2:	f8cd 8004 	str.w	r8, [sp, #4]
   d43c6:	9400      	str	r4, [sp, #0]
   d43c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d43ca:	4628      	mov	r0, r5
   d43cc:	463b      	mov	r3, r7
   d43ce:	4632      	mov	r2, r6
   d43d0:	4639      	mov	r1, r7
   d43d2:	47a0      	blx	r4
    endWrite();
   d43d4:	682b      	ldr	r3, [r5, #0]
   d43d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43d8:	4628      	mov	r0, r5
}
   d43da:	b002      	add	sp, #8
   d43dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d43e0:	4718      	bx	r3

000d43e2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43e6:	461d      	mov	r5, r3
    startWrite();
   d43e8:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d43ea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43ee:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d43f0:	4604      	mov	r4, r0
   d43f2:	4617      	mov	r7, r2
   d43f4:	460e      	mov	r6, r1
    startWrite();
   d43f6:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d43f8:	e9cd 7800 	strd	r7, r8, [sp]
   d43fc:	6822      	ldr	r2, [r4, #0]
   d43fe:	1e6b      	subs	r3, r5, #1
   d4400:	4433      	add	r3, r6
   d4402:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4404:	4620      	mov	r0, r4
   d4406:	b21b      	sxth	r3, r3
   d4408:	463a      	mov	r2, r7
   d440a:	4631      	mov	r1, r6
   d440c:	47a8      	blx	r5
    endWrite();
   d440e:	6823      	ldr	r3, [r4, #0]
   d4410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4412:	4620      	mov	r0, r4
}
   d4414:	b002      	add	sp, #8
   d4416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d441a:	4718      	bx	r3

000d441c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d441c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4420:	461e      	mov	r6, r3
    startWrite();
   d4422:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4424:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4428:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d442a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d442e:	460c      	mov	r4, r1
   d4430:	4605      	mov	r5, r0
   d4432:	4617      	mov	r7, r2
    startWrite();
   d4434:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4436:	4426      	add	r6, r4
   d4438:	42b4      	cmp	r4, r6
   d443a:	682b      	ldr	r3, [r5, #0]
   d443c:	da0b      	bge.n	d4456 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d443e:	f8cd 8000 	str.w	r8, [sp]
   d4442:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4446:	4621      	mov	r1, r4
   d4448:	464b      	mov	r3, r9
   d444a:	463a      	mov	r2, r7
   d444c:	4628      	mov	r0, r5
   d444e:	3401      	adds	r4, #1
   d4450:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4452:	b224      	sxth	r4, r4
   d4454:	e7f0      	b.n	d4438 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4458:	4628      	mov	r0, r5
}
   d445a:	b002      	add	sp, #8
   d445c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4460:	4718      	bx	r3

000d4462 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4462:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4464:	6802      	ldr	r2, [r0, #0]
   d4466:	9101      	str	r1, [sp, #4]
   d4468:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d446c:	9100      	str	r1, [sp, #0]
   d446e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4470:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4474:	2200      	movs	r2, #0
   d4476:	4611      	mov	r1, r2
   d4478:	47a0      	blx	r4
}
   d447a:	b002      	add	sp, #8
   d447c:	bd10      	pop	{r4, pc}

000d447e <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d447e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4482:	461d      	mov	r5, r3
    startWrite();
   d4484:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4486:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d448a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d448c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4490:	4604      	mov	r4, r0
   d4492:	460f      	mov	r7, r1
   d4494:	4616      	mov	r6, r2
    startWrite();
   d4496:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4498:	6823      	ldr	r3, [r4, #0]
   d449a:	f8cd 8000 	str.w	r8, [sp]
   d449e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44a2:	4632      	mov	r2, r6
   d44a4:	462b      	mov	r3, r5
   d44a6:	4639      	mov	r1, r7
   d44a8:	4620      	mov	r0, r4
   d44aa:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d44ac:	6823      	ldr	r3, [r4, #0]
   d44ae:	f8cd 8000 	str.w	r8, [sp]
   d44b2:	f109 32ff 	add.w	r2, r9, #4294967295
   d44b6:	4432      	add	r2, r6
   d44b8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44bc:	4639      	mov	r1, r7
   d44be:	462b      	mov	r3, r5
   d44c0:	4620      	mov	r0, r4
   d44c2:	b212      	sxth	r2, r2
   d44c4:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d44c6:	6823      	ldr	r3, [r4, #0]
   d44c8:	f8cd 8000 	str.w	r8, [sp]
   d44cc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44d0:	4632      	mov	r2, r6
   d44d2:	464b      	mov	r3, r9
   d44d4:	4639      	mov	r1, r7
   d44d6:	4620      	mov	r0, r4
   d44d8:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d44da:	1e6b      	subs	r3, r5, #1
   d44dc:	19d9      	adds	r1, r3, r7
   d44de:	6823      	ldr	r3, [r4, #0]
   d44e0:	f8cd 8000 	str.w	r8, [sp]
   d44e4:	6a1d      	ldr	r5, [r3, #32]
   d44e6:	4620      	mov	r0, r4
   d44e8:	464b      	mov	r3, r9
   d44ea:	4632      	mov	r2, r6
   d44ec:	b209      	sxth	r1, r1
   d44ee:	47a8      	blx	r5
    endWrite();
   d44f0:	6823      	ldr	r3, [r4, #0]
   d44f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44f4:	4620      	mov	r0, r4
}
   d44f6:	b002      	add	sp, #8
   d44f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d44fc:	4718      	bx	r3

000d44fe <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d44fe:	4770      	bx	lr

000d4500 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4504:	4299      	cmp	r1, r3
        uint16_t color) {
   d4506:	4616      	mov	r6, r2
   d4508:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d450c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4510:	6802      	ldr	r2, [r0, #0]
   d4512:	4680      	mov	r8, r0
   d4514:	460d      	mov	r5, r1
   d4516:	461c      	mov	r4, r3
    if(x0 == x1){
   d4518:	d113      	bne.n	d4542 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d451a:	42be      	cmp	r6, r7
   d451c:	bfc8      	it	gt
   d451e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4520:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4524:	bfc4      	itt	gt
   d4526:	463e      	movgt	r6, r7
   d4528:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d452a:	1c7b      	adds	r3, r7, #1
   d452c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d452e:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4530:	b21b      	sxth	r3, r3
   d4532:	4632      	mov	r2, r6
   d4534:	4629      	mov	r1, r5
   d4536:	4640      	mov	r0, r8
   d4538:	46a4      	mov	ip, r4
}
   d453a:	b003      	add	sp, #12
   d453c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4540:	4760      	bx	ip
    } else if(y0 == y1){
   d4542:	42be      	cmp	r6, r7
   d4544:	d10a      	bne.n	d455c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4546:	4299      	cmp	r1, r3
   d4548:	bfc2      	ittt	gt
   d454a:	460b      	movgt	r3, r1
   d454c:	4625      	movgt	r5, r4
   d454e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4550:	1c63      	adds	r3, r4, #1
   d4552:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4556:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4558:	1b5b      	subs	r3, r3, r5
   d455a:	e7e9      	b.n	d4530 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d455c:	6953      	ldr	r3, [r2, #20]
   d455e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4560:	e9cd 7900 	strd	r7, r9, [sp]
   d4564:	f8d8 3000 	ldr.w	r3, [r8]
   d4568:	4640      	mov	r0, r8
   d456a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d456c:	4632      	mov	r2, r6
   d456e:	4623      	mov	r3, r4
   d4570:	4629      	mov	r1, r5
   d4572:	47b8      	blx	r7
        endWrite();
   d4574:	f8d8 3000 	ldr.w	r3, [r8]
   d4578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d457a:	4640      	mov	r0, r8
}
   d457c:	b003      	add	sp, #12
   d457e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4582:	4718      	bx	r3

000d4584 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4584:	f001 0303 	and.w	r3, r1, #3
   d4588:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d458c:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d458e:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4590:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4594:	bf59      	ittee	pl
   d4596:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4598:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d459a:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d459c:	81c3      	strhmi	r3, [r0, #14]
}
   d459e:	4770      	bx	lr

000d45a0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d45a0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d45a2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d45a4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d45a6:	4a07      	ldr	r2, [pc, #28]	; (d45c4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d45a8:	4d07      	ldr	r5, [pc, #28]	; (d45c8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d45aa:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d45ac:	2400      	movs	r4, #0
    _width    = WIDTH;
   d45ae:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d45b0:	f04f 31ff 	mov.w	r1, #4294967295
   d45b4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d45b8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d45ba:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d45bc:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d45be:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d45c0:	6204      	str	r4, [r0, #32]
}
   d45c2:	bd30      	pop	{r4, r5, pc}
   d45c4:	01000101 	.word	0x01000101
   d45c8:	000d6bf0 	.word	0x000d6bf0

000d45cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45d0:	b089      	sub	sp, #36	; 0x24
   d45d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d45d6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45d8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d45dc:	9304      	str	r3, [sp, #16]
   d45de:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d45e2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45e4:	9305      	str	r3, [sp, #20]
   d45e6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d45ea:	4604      	mov	r4, r0
    startWrite();
   d45ec:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d45ee:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d45f2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d45f6:	bf48      	it	mi
   d45f8:	f108 020e 	addmi.w	r2, r8, #14
   d45fc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4600:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d4602:	4635      	mov	r5, r6
   d4604:	9b03      	ldr	r3, [sp, #12]
   d4606:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4608:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d460c:	189a      	adds	r2, r3, r2
   d460e:	9b05      	ldr	r3, [sp, #20]
   d4610:	428b      	cmp	r3, r1
   d4612:	b212      	sxth	r2, r2
   d4614:	dd27      	ble.n	d4666 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4616:	9b04      	ldr	r3, [sp, #16]
   d4618:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d461a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d461e:	9306      	str	r3, [sp, #24]
   d4620:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4624:	4580      	cmp	r8, r0
   d4626:	fa1f f189 	uxth.w	r1, r9
   d462a:	dd17      	ble.n	d465c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d462c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d462e:	bf05      	ittet	eq
   d4630:	9b06      	ldreq	r3, [sp, #24]
   d4632:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4634:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4636:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4638:	bf18      	it	ne
   d463a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d463c:	062b      	lsls	r3, r5, #24
   d463e:	d50a      	bpl.n	d4656 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4640:	9b02      	ldr	r3, [sp, #8]
   d4642:	6820      	ldr	r0, [r4, #0]
   d4644:	9207      	str	r2, [sp, #28]
   d4646:	4419      	add	r1, r3
   d4648:	6983      	ldr	r3, [r0, #24]
   d464a:	b209      	sxth	r1, r1
   d464c:	461f      	mov	r7, r3
   d464e:	4620      	mov	r0, r4
   d4650:	4653      	mov	r3, sl
   d4652:	47b8      	blx	r7
   d4654:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4656:	f109 0901 	add.w	r9, r9, #1
   d465a:	e7e1      	b.n	d4620 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d465c:	9b01      	ldr	r3, [sp, #4]
   d465e:	3301      	adds	r3, #1
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	445e      	add	r6, fp
   d4664:	e7ce      	b.n	d4604 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4666:	6823      	ldr	r3, [r4, #0]
   d4668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d466a:	4620      	mov	r0, r4
}
   d466c:	b009      	add	sp, #36	; 0x24
   d466e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4672:	4718      	bx	r3

000d4674 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4678:	ed2d 8b02 	vpush	{d8}
   d467c:	b091      	sub	sp, #68	; 0x44
   d467e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4680:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4682:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4686:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d468a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d468e:	9103      	str	r1, [sp, #12]
   d4690:	461f      	mov	r7, r3
   d4692:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4696:	9304      	str	r3, [sp, #16]
   d4698:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d469a:	2a00      	cmp	r2, #0
   d469c:	f040 80c5 	bne.w	d482a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d46a0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d46a4:	428b      	cmp	r3, r1
   d46a6:	f340 814c 	ble.w	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d46aa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d46ae:	42b3      	cmp	r3, r6
   d46b0:	f340 8147 	ble.w	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46b4:	2306      	movs	r3, #6
   d46b6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d46ba:	2b00      	cmp	r3, #0
   d46bc:	f340 8141 	ble.w	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d46c0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46c4:	2b00      	cmp	r3, #0
   d46c6:	f340 813c 	ble.w	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d46ca:	7f03      	ldrb	r3, [r0, #28]
   d46cc:	b91b      	cbnz	r3, d46d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d46ce:	2faf      	cmp	r7, #175	; 0xaf
   d46d0:	bf84      	itt	hi
   d46d2:	3701      	addhi	r7, #1
   d46d4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d46d6:	f8db 3000 	ldr.w	r3, [fp]
   d46da:	4658      	mov	r0, fp
   d46dc:	695b      	ldr	r3, [r3, #20]
   d46de:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46e0:	2205      	movs	r2, #5
   d46e2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d46e4:	2200      	movs	r2, #0
   d46e6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46e8:	4a98      	ldr	r2, [pc, #608]	; (d494c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d46ea:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d46ee:	18d3      	adds	r3, r2, r3
   d46f0:	930c      	str	r3, [sp, #48]	; 0x30
   d46f2:	b2b3      	uxth	r3, r6
   d46f4:	9306      	str	r3, [sp, #24]
   d46f6:	9a05      	ldr	r2, [sp, #20]
   d46f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d46fa:	5c9b      	ldrb	r3, [r3, r2]
   d46fc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d46fe:	b2ab      	uxth	r3, r5
   d4700:	930b      	str	r3, [sp, #44]	; 0x2c
   d4702:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4706:	9308      	str	r3, [sp, #32]
   d4708:	9b03      	ldr	r3, [sp, #12]
   d470a:	fb02 f905 	mul.w	r9, r2, r5
   d470e:	fa19 f983 	uxtah	r9, r9, r3
   d4712:	fa0f f389 	sxth.w	r3, r9
   d4716:	ee08 3a10 	vmov	s16, r3
   d471a:	2308      	movs	r3, #8
   d471c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d471e:	9b03      	ldr	r3, [sp, #12]
   d4720:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4724:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4728:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d472c:	9a07      	ldr	r2, [sp, #28]
   d472e:	f8db 3000 	ldr.w	r3, [fp]
   d4732:	07d2      	lsls	r2, r2, #31
   d4734:	d552      	bpl.n	d47dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d4736:	2d01      	cmp	r5, #1
   d4738:	fa1f f289 	uxth.w	r2, r9
   d473c:	d13e      	bne.n	d47bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d473e:	2c01      	cmp	r4, #1
   d4740:	d13c      	bne.n	d47bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d4742:	699b      	ldr	r3, [r3, #24]
   d4744:	9906      	ldr	r1, [sp, #24]
   d4746:	461f      	mov	r7, r3
   d4748:	9b04      	ldr	r3, [sp, #16]
   d474a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d474c:	b212      	sxth	r2, r2
   d474e:	4651      	mov	r1, sl
   d4750:	4658      	mov	r0, fp
   d4752:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4754:	f109 0301 	add.w	r3, r9, #1
   d4758:	fa4f f983 	sxtb.w	r9, r3
   d475c:	9b07      	ldr	r3, [sp, #28]
   d475e:	085b      	lsrs	r3, r3, #1
   d4760:	9307      	str	r3, [sp, #28]
   d4762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4764:	3b01      	subs	r3, #1
   d4766:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d476a:	930a      	str	r3, [sp, #40]	; 0x28
   d476c:	d1de      	bne.n	d472c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d476e:	9f05      	ldr	r7, [sp, #20]
   d4770:	3701      	adds	r7, #1
   d4772:	b27b      	sxtb	r3, r7
   d4774:	9305      	str	r3, [sp, #20]
   d4776:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4778:	3b01      	subs	r3, #1
   d477a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d477e:	9309      	str	r3, [sp, #36]	; 0x24
   d4780:	d1b9      	bne.n	d46f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4782:	9b04      	ldr	r3, [sp, #16]
   d4784:	4543      	cmp	r3, r8
   d4786:	d00f      	beq.n	d47a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4788:	2d01      	cmp	r5, #1
   d478a:	f8db 3000 	ldr.w	r3, [fp]
   d478e:	d13b      	bne.n	d4808 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4790:	2c01      	cmp	r4, #1
   d4792:	d139      	bne.n	d4808 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4794:	9908      	ldr	r1, [sp, #32]
   d4796:	f8cd 8000 	str.w	r8, [sp]
   d479a:	3105      	adds	r1, #5
   d479c:	6a1c      	ldr	r4, [r3, #32]
   d479e:	4632      	mov	r2, r6
   d47a0:	2308      	movs	r3, #8
   d47a2:	b209      	sxth	r1, r1
   d47a4:	4658      	mov	r0, fp
   d47a6:	47a0      	blx	r4
        endWrite();
   d47a8:	f8db 3000 	ldr.w	r3, [fp]
   d47ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47ae:	4658      	mov	r0, fp
}
   d47b0:	b011      	add	sp, #68	; 0x44
   d47b2:	ecbd 8b02 	vpop	{d8}
   d47b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d47ba:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d47bc:	9906      	ldr	r1, [sp, #24]
   d47be:	fb14 f202 	smulbb	r2, r4, r2
   d47c2:	440a      	add	r2, r1
   d47c4:	9904      	ldr	r1, [sp, #16]
   d47c6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47c8:	9400      	str	r4, [sp, #0]
   d47ca:	69db      	ldr	r3, [r3, #28]
   d47cc:	ee18 1a10 	vmov	r1, s16
   d47d0:	461f      	mov	r7, r3
   d47d2:	b212      	sxth	r2, r2
   d47d4:	462b      	mov	r3, r5
   d47d6:	4658      	mov	r0, fp
   d47d8:	47b8      	blx	r7
   d47da:	e7bb      	b.n	d4754 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d47dc:	9a04      	ldr	r2, [sp, #16]
   d47de:	4542      	cmp	r2, r8
   d47e0:	d0b8      	beq.n	d4754 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d47e2:	2d01      	cmp	r5, #1
   d47e4:	fa1f f289 	uxth.w	r2, r9
   d47e8:	d107      	bne.n	d47fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d47ea:	2c01      	cmp	r4, #1
   d47ec:	d105      	bne.n	d47fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d47ee:	699b      	ldr	r3, [r3, #24]
   d47f0:	9906      	ldr	r1, [sp, #24]
   d47f2:	461f      	mov	r7, r3
   d47f4:	440a      	add	r2, r1
   d47f6:	4643      	mov	r3, r8
   d47f8:	e7a8      	b.n	d474c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47fa:	9906      	ldr	r1, [sp, #24]
   d47fc:	f8cd 8004 	str.w	r8, [sp, #4]
   d4800:	fb14 f202 	smulbb	r2, r4, r2
   d4804:	440a      	add	r2, r1
   d4806:	e7df      	b.n	d47c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d480a:	f8cd 8004 	str.w	r8, [sp, #4]
   d480e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d4812:	9a08      	ldr	r2, [sp, #32]
   d4814:	00e4      	lsls	r4, r4, #3
   d4816:	440a      	add	r2, r1
   d4818:	4611      	mov	r1, r2
   d481a:	9400      	str	r4, [sp, #0]
   d481c:	69dc      	ldr	r4, [r3, #28]
   d481e:	4632      	mov	r2, r6
   d4820:	462b      	mov	r3, r5
   d4822:	b209      	sxth	r1, r1
   d4824:	4658      	mov	r0, fp
   d4826:	47a0      	blx	r4
        endWrite();
   d4828:	e7be      	b.n	d47a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d482a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d482c:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d482e:	6812      	ldr	r2, [r2, #0]
   d4830:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4832:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4834:	b2ff      	uxtb	r7, r7
   d4836:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d483a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d483e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4840:	789a      	ldrb	r2, [r3, #2]
   d4842:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4844:	78da      	ldrb	r2, [r3, #3]
   d4846:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4848:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d484a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d484e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4852:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4854:	d801      	bhi.n	d485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4856:	2c01      	cmp	r4, #1
   d4858:	d957      	bls.n	d490a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d485a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d485e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4860:	fa0f f38a 	sxth.w	r3, sl
   d4864:	9307      	str	r3, [sp, #28]
        startWrite();
   d4866:	f8db 3000 	ldr.w	r3, [fp]
   d486a:	4658      	mov	r0, fp
   d486c:	695b      	ldr	r3, [r3, #20]
   d486e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4870:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4872:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4876:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4878:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d487c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d487e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4880:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4884:	429f      	cmp	r7, r3
   d4886:	d28f      	bcs.n	d47a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4888:	9b07      	ldr	r3, [sp, #28]
   d488a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d488c:	443b      	add	r3, r7
   d488e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4892:	2200      	movs	r2, #0
   d4894:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4898:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d489a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d489e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48a2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48a6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d48a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d48aa:	9905      	ldr	r1, [sp, #20]
   d48ac:	4291      	cmp	r1, r2
   d48ae:	d241      	bcs.n	d4934 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d48b0:	1c5a      	adds	r2, r3, #1
   d48b2:	b2d2      	uxtb	r2, r2
   d48b4:	075b      	lsls	r3, r3, #29
   d48b6:	920c      	str	r2, [sp, #48]	; 0x30
   d48b8:	d107      	bne.n	d48ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d48ba:	9b06      	ldr	r3, [sp, #24]
   d48bc:	9906      	ldr	r1, [sp, #24]
   d48be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d48c0:	3301      	adds	r3, #1
   d48c2:	b29b      	uxth	r3, r3
   d48c4:	f812 9001 	ldrb.w	r9, [r2, r1]
   d48c8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d48ca:	f019 0f80 	tst.w	r9, #128	; 0x80
   d48ce:	d012      	beq.n	d48f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d48d0:	2d01      	cmp	r5, #1
   d48d2:	f8db 3000 	ldr.w	r3, [fp]
   d48d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d48da:	d11a      	bne.n	d4912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d48dc:	2c01      	cmp	r4, #1
   d48de:	d118      	bne.n	d4912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d48e2:	699b      	ldr	r3, [r3, #24]
   d48e4:	4411      	add	r1, r2
   d48e6:	9a05      	ldr	r2, [sp, #20]
   d48e8:	4411      	add	r1, r2
   d48ea:	461e      	mov	r6, r3
   d48ec:	4652      	mov	r2, sl
   d48ee:	9b04      	ldr	r3, [sp, #16]
   d48f0:	b209      	sxth	r1, r1
   d48f2:	4658      	mov	r0, fp
   d48f4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d48f6:	9e05      	ldr	r6, [sp, #20]
   d48f8:	3601      	adds	r6, #1
   d48fa:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d48fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4900:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4902:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4908:	e7ce      	b.n	d48a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d490a:	2300      	movs	r3, #0
   d490c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4910:	e7a9      	b.n	d4866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4912:	9805      	ldr	r0, [sp, #20]
   d4914:	9a08      	ldr	r2, [sp, #32]
   d4916:	4402      	add	r2, r0
   d4918:	fb02 1105 	mla	r1, r2, r5, r1
   d491c:	9a04      	ldr	r2, [sp, #16]
   d491e:	e9cd 4200 	strd	r4, r2, [sp]
   d4922:	69db      	ldr	r3, [r3, #28]
   d4924:	ee18 2a10 	vmov	r2, s16
   d4928:	461e      	mov	r6, r3
   d492a:	b209      	sxth	r1, r1
   d492c:	462b      	mov	r3, r5
   d492e:	4658      	mov	r0, fp
   d4930:	47b0      	blx	r6
   d4932:	e7e0      	b.n	d48f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4934:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4936:	3701      	adds	r7, #1
   d4938:	4498      	add	r8, r3
   d493a:	fa5f f888 	uxtb.w	r8, r8
   d493e:	b2ff      	uxtb	r7, r7
   d4940:	e79f      	b.n	d4882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4942:	b011      	add	sp, #68	; 0x44
   d4944:	ecbd 8b02 	vpop	{d8}
   d4948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d494c:	000d66e8 	.word	0x000d66e8

000d4950 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4950:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4952:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4954:	b085      	sub	sp, #20
   d4956:	4604      	mov	r4, r0
   d4958:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d495a:	2a00      	cmp	r2, #0
   d495c:	d134      	bne.n	d49c8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d495e:	290a      	cmp	r1, #10
   d4960:	d108      	bne.n	d4974 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4962:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4964:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4966:	7e42      	ldrb	r2, [r0, #25]
   d4968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d496c:	8263      	strh	r3, [r4, #18]
}
   d496e:	2001      	movs	r0, #1
   d4970:	b005      	add	sp, #20
   d4972:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4974:	290d      	cmp	r1, #13
   d4976:	d0fa      	beq.n	d496e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4978:	7ee1      	ldrb	r1, [r4, #27]
   d497a:	7e00      	ldrb	r0, [r0, #24]
   d497c:	7e65      	ldrb	r5, [r4, #25]
   d497e:	b171      	cbz	r1, d499e <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4980:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4984:	2106      	movs	r1, #6
   d4986:	fb11 6100 	smlabb	r1, r1, r0, r6
   d498a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d498e:	42b1      	cmp	r1, r6
   d4990:	bfc1      	itttt	gt
   d4992:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4996:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4998:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d499c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d499e:	8ae2      	ldrh	r2, [r4, #22]
   d49a0:	9201      	str	r2, [sp, #4]
   d49a2:	8aa2      	ldrh	r2, [r4, #20]
   d49a4:	9200      	str	r2, [sp, #0]
   d49a6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d49aa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d49ae:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fe5e 	bl	d4674 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d49b8:	7e23      	ldrb	r3, [r4, #24]
   d49ba:	8a22      	ldrh	r2, [r4, #16]
   d49bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d49c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d49c4:	8223      	strh	r3, [r4, #16]
   d49c6:	e7d2      	b.n	d496e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d49c8:	290a      	cmp	r1, #10
   d49ca:	d107      	bne.n	d49dc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d49cc:	2300      	movs	r3, #0
   d49ce:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d49d0:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d49d2:	7e41      	ldrb	r1, [r0, #25]
   d49d4:	8a42      	ldrh	r2, [r0, #18]
   d49d6:	fb01 2303 	mla	r3, r1, r3, r2
   d49da:	e7c7      	b.n	d496c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d49dc:	290d      	cmp	r1, #13
   d49de:	d0c6      	beq.n	d496e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d49e0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d49e2:	42a9      	cmp	r1, r5
   d49e4:	d3c3      	bcc.n	d496e <_ZN12Adafruit_GFX5writeEh+0x1e>
   d49e6:	7a51      	ldrb	r1, [r2, #9]
   d49e8:	4299      	cmp	r1, r3
   d49ea:	d3c0      	bcc.n	d496e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d49ec:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d49ee:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d49f0:	b2ed      	uxtb	r5, r5
   d49f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d49f6:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d49f8:	b32f      	cbz	r7, d4a46 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d49fa:	78e9      	ldrb	r1, [r5, #3]
   d49fc:	b319      	cbz	r1, d4a46 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d49fe:	7ee1      	ldrb	r1, [r4, #27]
   d4a00:	7e00      	ldrb	r0, [r0, #24]
   d4a02:	7e66      	ldrb	r6, [r4, #25]
   d4a04:	b191      	cbz	r1, d4a2c <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a06:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a0a:	4439      	add	r1, r7
   d4a0c:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a10:	fb00 7101 	mla	r1, r0, r1, r7
   d4a14:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a18:	42b9      	cmp	r1, r7
   d4a1a:	dd07      	ble.n	d4a2c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a1c:	2700      	movs	r7, #0
   d4a1e:	8227      	strh	r7, [r4, #16]
   d4a20:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a24:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a26:	fb02 1206 	mla	r2, r2, r6, r1
   d4a2a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a2c:	8ae2      	ldrh	r2, [r4, #22]
   d4a2e:	9201      	str	r2, [sp, #4]
   d4a30:	8aa2      	ldrh	r2, [r4, #20]
   d4a32:	9200      	str	r2, [sp, #0]
   d4a34:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4a38:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a3c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a40:	4620      	mov	r0, r4
   d4a42:	f7ff fe17 	bl	d4674 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a46:	7929      	ldrb	r1, [r5, #4]
   d4a48:	7e23      	ldrb	r3, [r4, #24]
   d4a4a:	8a22      	ldrh	r2, [r4, #16]
   d4a4c:	fb01 2303 	mla	r3, r1, r3, r2
   d4a50:	e7b8      	b.n	d49c4 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4a52 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4a52:	2901      	cmp	r1, #1
   d4a54:	bf38      	it	cc
   d4a56:	2101      	movcc	r1, #1
   d4a58:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4a5a:	7641      	strb	r1, [r0, #25]
}
   d4a5c:	4770      	bx	lr
	...

000d4a60 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4a60:	b510      	push	{r4, lr}
   d4a62:	4b06      	ldr	r3, [pc, #24]	; (d4a7c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4a64:	6003      	str	r3, [r0, #0]
   d4a66:	4604      	mov	r4, r0
	if (mutex) {
   d4a68:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4a6a:	b108      	cbz	r0, d4a70 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4a6c:	f000 fdb2 	bl	d55d4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4a70:	4620      	mov	r0, r4
   d4a72:	f000 f8d1 	bl	d4c18 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4a76:	4620      	mov	r0, r4
   d4a78:	bd10      	pop	{r4, pc}
   d4a7a:	bf00      	nop
   d4a7c:	000d6c48 	.word	0x000d6c48

000d4a80 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4a80:	b510      	push	{r4, lr}
   d4a82:	4604      	mov	r4, r0
}
   d4a84:	f7ff ffec 	bl	d4a60 <_ZN16OledWingAdafruitD1Ev>
   d4a88:	4620      	mov	r0, r4
   d4a8a:	2170      	movs	r1, #112	; 0x70
   d4a8c:	f001 fdab 	bl	d65e6 <_ZdlPvj>
   d4a90:	4620      	mov	r0, r4
   d4a92:	bd10      	pop	{r4, pc}

000d4a94 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4a94:	b530      	push	{r4, r5, lr}
   d4a96:	b085      	sub	sp, #20
   d4a98:	4604      	mov	r4, r0
   d4a9a:	460d      	mov	r5, r1
   d4a9c:	f001 fd76 	bl	d658c <_Z19__fetch_global_Wirev>
   d4aa0:	4a10      	ldr	r2, [pc, #64]	; (d4ae4 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4aa2:	4911      	ldr	r1, [pc, #68]	; (d4ae8 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4aa4:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4aa8:	f04f 32ff 	mov.w	r2, #4294967295
   d4aac:	2180      	movs	r1, #128	; 0x80
   d4aae:	4603      	mov	r3, r0
   d4ab0:	9200      	str	r2, [sp, #0]
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	2220      	movs	r2, #32
   d4ab6:	f000 f935 	bl	d4d24 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4aba:	4b0c      	ldr	r3, [pc, #48]	; (d4aec <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4abc:	6023      	str	r3, [r4, #0]
   d4abe:	2300      	movs	r3, #0
   d4ac0:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4ac8:	f000 f854 	bl	d4b74 <_ZN8DebounceC1Ev>
   d4acc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4ad0:	f000 f850 	bl	d4b74 <_ZN8DebounceC1Ev>
   d4ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4ad8:	f000 f84c 	bl	d4b74 <_ZN8DebounceC1Ev>
}
   d4adc:	4620      	mov	r0, r4
   d4ade:	b005      	add	sp, #20
   d4ae0:	bd30      	pop	{r4, r5, pc}
   d4ae2:	bf00      	nop
   d4ae4:	00061a80 	.word	0x00061a80
   d4ae8:	000186a0 	.word	0x000186a0
   d4aec:	000d6c48 	.word	0x000d6c48

000d4af0 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4af0:	b513      	push	{r0, r1, r4, lr}
   d4af2:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4af4:	3050      	adds	r0, #80	; 0x50
   d4af6:	f000 fd65 	bl	d55c4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4afa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4afc:	07d9      	lsls	r1, r3, #31
   d4afe:	d505      	bpl.n	d4b0c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b00:	2202      	movs	r2, #2
   d4b02:	2104      	movs	r1, #4
   d4b04:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b08:	f000 f848 	bl	d4b9c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b0e:	079a      	lsls	r2, r3, #30
   d4b10:	d505      	bpl.n	d4b1e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b12:	2200      	movs	r2, #0
   d4b14:	2103      	movs	r1, #3
   d4b16:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b1a:	f000 f83f 	bl	d4b9c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b20:	075b      	lsls	r3, r3, #29
   d4b22:	d505      	bpl.n	d4b30 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b24:	2202      	movs	r2, #2
   d4b26:	4611      	mov	r1, r2
   d4b28:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b2c:	f000 f836 	bl	d4b9c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b30:	2301      	movs	r3, #1
   d4b32:	9300      	str	r3, [sp, #0]
   d4b34:	223c      	movs	r2, #60	; 0x3c
   d4b36:	2102      	movs	r1, #2
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f000 f9f3 	bl	d4f24 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4b3e:	b002      	add	sp, #8
   d4b40:	bd10      	pop	{r4, pc}

000d4b42 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4b42:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4b44:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4b46:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4b48:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4b4a:	d502      	bpl.n	d4b52 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4b4c:	3058      	adds	r0, #88	; 0x58
   d4b4e:	f000 f832 	bl	d4bb6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b52:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b54:	079a      	lsls	r2, r3, #30
   d4b56:	d503      	bpl.n	d4b60 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4b58:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b5c:	f000 f82b 	bl	d4bb6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b60:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b62:	075b      	lsls	r3, r3, #29
   d4b64:	d505      	bpl.n	d4b72 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4b66:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4b6e:	f000 b822 	b.w	d4bb6 <_ZN8Debounce6updateEv>
}
   d4b72:	bd10      	pop	{r4, pc}

000d4b74 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4b74:	2100      	movs	r1, #0
   d4b76:	220a      	movs	r2, #10
   d4b78:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4b7c:	4770      	bx	lr

000d4b7e <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4b7e:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4b80:	b510      	push	{r4, lr}
   d4b82:	4604      	mov	r4, r0
    this->pin = pin;
   d4b84:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4b86:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4b88:	b288      	uxth	r0, r1
   d4b8a:	f001 fcd3 	bl	d6534 <digitalRead>
   d4b8e:	b108      	cbz	r0, d4b94 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4b90:	2303      	movs	r3, #3
   d4b92:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b94:	f000 fd0e 	bl	d55b4 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4b98:	6020      	str	r0, [r4, #0]
#endif
}
   d4b9a:	bd10      	pop	{r4, pc}

000d4b9c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4b9c:	b538      	push	{r3, r4, r5, lr}
   d4b9e:	460c      	mov	r4, r1
   d4ba0:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4ba2:	4611      	mov	r1, r2
   d4ba4:	b2a0      	uxth	r0, r4
   d4ba6:	f001 fc9b 	bl	d64e0 <pinMode>
  
  this->attach(pin);
   d4baa:	4621      	mov	r1, r4
   d4bac:	4628      	mov	r0, r5
}
   d4bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4bb2:	f7ff bfe4 	b.w	d4b7e <_ZN8Debounce6attachEi>

000d4bb6 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4bb6:	b538      	push	{r3, r4, r5, lr}
   d4bb8:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4bba:	79c0      	ldrb	r0, [r0, #7]
   d4bbc:	f001 fcba 	bl	d6534 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4bc0:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4bc2:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4bc4:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4bc8:	bf18      	it	ne
   d4bca:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4bcc:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4bd0:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4bd2:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4bd4:	d00a      	beq.n	d4bec <_ZN8Debounce6updateEv+0x36>
   d4bd6:	f000 fced 	bl	d55b4 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4bda:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4bdc:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4bde:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4be2:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4be4:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4be6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4bea:	bd38      	pop	{r3, r4, r5, pc}
   d4bec:	f000 fce2 	bl	d55b4 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4bf0:	6823      	ldr	r3, [r4, #0]
   d4bf2:	1ac0      	subs	r0, r0, r3
   d4bf4:	88a3      	ldrh	r3, [r4, #4]
   d4bf6:	4298      	cmp	r0, r3
   d4bf8:	d3f4      	bcc.n	d4be4 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4bfa:	79a3      	ldrb	r3, [r4, #6]
   d4bfc:	f003 0301 	and.w	r3, r3, #1
   d4c00:	42ab      	cmp	r3, r5
   d4c02:	d0ef      	beq.n	d4be4 <_ZN8Debounce6updateEv+0x2e>
   d4c04:	f000 fcd6 	bl	d55b4 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4c08:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4c0a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4c0c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4c10:	f043 0308 	orr.w	r3, r3, #8
   d4c14:	e7e5      	b.n	d4be2 <_ZN8Debounce6updateEv+0x2c>
	...

000d4c18 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c18:	b510      	push	{r4, lr}
   d4c1a:	4b04      	ldr	r3, [pc, #16]	; (d4c2c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4c1c:	6003      	str	r3, [r0, #0]
   d4c1e:	4604      	mov	r4, r0
  if(buffer) {
   d4c20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c22:	b108      	cbz	r0, d4c28 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4c24:	f000 fea2 	bl	d596c <free>
    buffer = NULL;
  }
}
   d4c28:	4620      	mov	r0, r4
   d4c2a:	bd10      	pop	{r4, pc}
   d4c2c:	000d7154 	.word	0x000d7154

000d4c30 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c30:	b510      	push	{r4, lr}
   d4c32:	4604      	mov	r4, r0
}
   d4c34:	f7ff fff0 	bl	d4c18 <_ZN16Adafruit_SSD1306D1Ev>
   d4c38:	4620      	mov	r0, r4
   d4c3a:	2150      	movs	r1, #80	; 0x50
   d4c3c:	f001 fcd3 	bl	d65e6 <_ZdlPvj>
   d4c40:	4620      	mov	r0, r4
   d4c42:	bd10      	pop	{r4, pc}

000d4c44 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c44:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c46:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c48:	db4b      	blt.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c4a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4c4e:	428c      	cmp	r4, r1
   d4c50:	dd47      	ble.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c52:	2a00      	cmp	r2, #0
   d4c54:	db45      	blt.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c56:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4c5a:	4294      	cmp	r4, r2
   d4c5c:	dd41      	ble.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4c5e:	7e84      	ldrb	r4, [r0, #26]
   d4c60:	2c02      	cmp	r4, #2
   d4c62:	d01f      	beq.n	d4ca4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4c64:	2c03      	cmp	r4, #3
   d4c66:	d026      	beq.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4c68:	2c01      	cmp	r4, #1
   d4c6a:	d104      	bne.n	d4c76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4c6c:	8904      	ldrh	r4, [r0, #8]
   d4c6e:	43d2      	mvns	r2, r2
   d4c70:	4414      	add	r4, r2
      break;
   d4c72:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4c74:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4c76:	2b01      	cmp	r3, #1
   d4c78:	d023      	beq.n	d4cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4c7a:	2b02      	cmp	r3, #2
   d4c7c:	d032      	beq.n	d4ce4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4c7e:	bb83      	cbnz	r3, d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4c80:	2a00      	cmp	r2, #0
   d4c82:	4613      	mov	r3, r2
   d4c84:	8904      	ldrh	r4, [r0, #8]
   d4c86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c88:	bfb8      	it	lt
   d4c8a:	1dd3      	addlt	r3, r2, #7
   d4c8c:	10db      	asrs	r3, r3, #3
   d4c8e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c92:	f002 0207 	and.w	r2, r2, #7
   d4c96:	2301      	movs	r3, #1
   d4c98:	4093      	lsls	r3, r2
   d4c9a:	5c42      	ldrb	r2, [r0, r1]
   d4c9c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4ca0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4ca2:	e01e      	b.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4ca4:	8904      	ldrh	r4, [r0, #8]
   d4ca6:	43c9      	mvns	r1, r1
   d4ca8:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4caa:	8944      	ldrh	r4, [r0, #10]
   d4cac:	43d2      	mvns	r2, r2
   d4cae:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4cb0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4cb2:	b212      	sxth	r2, r2
      break;
   d4cb4:	e7df      	b.n	d4c76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4cb6:	8944      	ldrh	r4, [r0, #10]
   d4cb8:	43c9      	mvns	r1, r1
   d4cba:	440c      	add	r4, r1
      break;
   d4cbc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4cbe:	b222      	sxth	r2, r4
      break;
   d4cc0:	e7d9      	b.n	d4c76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4cc2:	2a00      	cmp	r2, #0
   d4cc4:	8904      	ldrh	r4, [r0, #8]
   d4cc6:	4613      	mov	r3, r2
   d4cc8:	bfb8      	it	lt
   d4cca:	1dd3      	addlt	r3, r2, #7
   d4ccc:	10db      	asrs	r3, r3, #3
   d4cce:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4cd4:	f002 0007 	and.w	r0, r2, #7
   d4cd8:	2201      	movs	r2, #1
   d4cda:	4082      	lsls	r2, r0
   d4cdc:	5c58      	ldrb	r0, [r3, r1]
   d4cde:	4302      	orrs	r2, r0
   d4ce0:	545a      	strb	r2, [r3, r1]
}
   d4ce2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4ce4:	2a00      	cmp	r2, #0
   d4ce6:	4613      	mov	r3, r2
   d4ce8:	8904      	ldrh	r4, [r0, #8]
   d4cea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cec:	bfb8      	it	lt
   d4cee:	1dd3      	addlt	r3, r2, #7
   d4cf0:	10db      	asrs	r3, r3, #3
   d4cf2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cf6:	f002 0207 	and.w	r2, r2, #7
   d4cfa:	2301      	movs	r3, #1
   d4cfc:	fa03 f202 	lsl.w	r2, r3, r2
   d4d00:	5c43      	ldrb	r3, [r0, r1]
   d4d02:	405a      	eors	r2, r3
   d4d04:	e7cc      	b.n	d4ca0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4d06 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d06:	b510      	push	{r4, lr}
   d4d08:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4d0a:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4d0e:	2101      	movs	r1, #1
   d4d10:	b280      	uxth	r0, r0
   d4d12:	f001 fbf6 	bl	d6502 <digitalWrite>
   d4d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d18:	b118      	cbz	r0, d4d22 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4d1e:	f000 be9c 	b.w	d5a5a <_ZN8SPIClass14endTransactionEv>
}
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4d24:	b570      	push	{r4, r5, r6, lr}
   d4d26:	4604      	mov	r4, r0
   d4d28:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d2a:	2600      	movs	r6, #0
   d4d2c:	f7ff fc38 	bl	d45a0 <_ZN12Adafruit_GFXC1Ess>
   d4d30:	4b11      	ldr	r3, [pc, #68]	; (d4d78 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d32:	6023      	str	r3, [r4, #0]
   d4d34:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4d36:	b915      	cbnz	r5, d4d3e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4d38:	f001 fc28 	bl	d658c <_Z19__fetch_global_Wirev>
   d4d3c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d3e:	23ff      	movs	r3, #255	; 0xff
   d4d40:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4d44:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d48:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4d4c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4d50:	4b0a      	ldr	r3, [pc, #40]	; (d4d7c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4d52:	63a3      	str	r3, [r4, #56]	; 0x38
   d4d54:	2301      	movs	r3, #1
   d4d56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4d5a:	9b05      	ldr	r3, [sp, #20]
   d4d5c:	64a3      	str	r3, [r4, #72]	; 0x48
   d4d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d62:	9b06      	ldr	r3, [sp, #24]
   d4d64:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4d66:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4d6a:	6426      	str	r6, [r4, #64]	; 0x40
   d4d6c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4d70:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd70      	pop	{r4, r5, r6, pc}
   d4d76:	bf00      	nop
   d4d78:	000d7154 	.word	0x000d7154
   d4d7c:	000d6ca0 	.word	0x000d6ca0

000d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d82:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4d84:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d86:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4d88:	b190      	cbz	r0, d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4d8a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4d8e:	f001 fa71 	bl	d6274 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4d92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d94:	6803      	ldr	r3, [r0, #0]
   d4d96:	2100      	movs	r1, #0
   d4d98:	689b      	ldr	r3, [r3, #8]
   d4d9a:	4798      	blx	r3
    WIRE_WRITE(c);
   d4d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d9e:	6803      	ldr	r3, [r0, #0]
   d4da0:	4629      	mov	r1, r5
   d4da2:	689b      	ldr	r3, [r3, #8]
   d4da4:	4798      	blx	r3
    wire->endTransmission();
   d4da6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4dac:	f001 ba69 	b.w	d6282 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4db0:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4db4:	4601      	mov	r1, r0
   d4db6:	b298      	uxth	r0, r3
   d4db8:	f001 fba3 	bl	d6502 <digitalWrite>
  if(spi) {
   d4dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4dbe:	b120      	cbz	r0, d4dca <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4dc0:	4629      	mov	r1, r5
}
   d4dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4dc6:	f000 becf 	b.w	d5b68 <_ZN8SPIClass8transferEh>
   d4dca:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4dcc:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4dce:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4dd2:	ea05 0107 	and.w	r1, r5, r7
   d4dd6:	b280      	uxth	r0, r0
   d4dd8:	f001 fb93 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4ddc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4de0:	2101      	movs	r1, #1
   d4de2:	b280      	uxth	r0, r0
   d4de4:	f001 fb8d 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4de8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4dec:	2100      	movs	r1, #0
   d4dee:	b280      	uxth	r0, r0
   d4df0:	f001 fb87 	bl	d6502 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4df4:	3e01      	subs	r6, #1
   d4df6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4dfa:	d1e8      	bne.n	d4dce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dfe <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4dfe:	b538      	push	{r3, r4, r5, lr}
   d4e00:	4604      	mov	r4, r0
  TRANSACTION_START
   d4e02:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e04:	460d      	mov	r5, r1
  TRANSACTION_START
   d4e06:	b180      	cbz	r0, d4e2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4e08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e0a:	f001 fa25 	bl	d6258 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4e0e:	2d00      	cmp	r5, #0
   d4e10:	4620      	mov	r0, r4
   d4e12:	bf14      	ite	ne
   d4e14:	21a7      	movne	r1, #167	; 0xa7
   d4e16:	21a6      	moveq	r1, #166	; 0xa6
   d4e18:	f7ff ffb2 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e1e:	b188      	cbz	r0, d4e44 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4e20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e26:	f001 ba17 	b.w	d6258 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e2c:	b118      	cbz	r0, d4e36 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e2e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e32:	f000 fe2b 	bl	d5a8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4e36:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	b280      	uxth	r0, r0
   d4e3e:	f001 fb60 	bl	d6502 <digitalWrite>
   d4e42:	e7e4      	b.n	d4e0e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4e44:	4620      	mov	r0, r4
}
   d4e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e4a:	f7ff bf5c 	b.w	d4d06 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e52:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e54:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e56:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e58:	188f      	adds	r7, r1, r2
   d4e5a:	b340      	cbz	r0, d4eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4e5c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e60:	f001 fa08 	bl	d6274 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e66:	6803      	ldr	r3, [r0, #0]
   d4e68:	2100      	movs	r1, #0
   d4e6a:	689b      	ldr	r3, [r3, #8]
   d4e6c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4e6e:	2601      	movs	r6, #1
    while(n--) {
   d4e70:	42bd      	cmp	r5, r7
   d4e72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e74:	d017      	beq.n	d4ea6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4e76:	2e1f      	cmp	r6, #31
   d4e78:	d90c      	bls.n	d4e94 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4e7a:	f001 fa02 	bl	d6282 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4e7e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e84:	f001 f9f6 	bl	d6274 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e8a:	6803      	ldr	r3, [r0, #0]
   d4e8c:	2100      	movs	r1, #0
   d4e8e:	689b      	ldr	r3, [r3, #8]
   d4e90:	4798      	blx	r3
        bytesOut = 1;
   d4e92:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e96:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e9a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4e9c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e9e:	689b      	ldr	r3, [r3, #8]
   d4ea0:	4798      	blx	r3
      bytesOut++;
   d4ea2:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4ea4:	e7e4      	b.n	d4e70 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4ea6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4eaa:	f001 b9ea 	b.w	d6282 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4eae:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4eb2:	4601      	mov	r1, r0
   d4eb4:	b298      	uxth	r0, r3
   d4eb6:	f001 fb24 	bl	d6502 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4eba:	42af      	cmp	r7, r5
   d4ebc:	d022      	beq.n	d4f04 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ec0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4ec4:	b118      	cbz	r0, d4ece <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4ec6:	4649      	mov	r1, r9
   d4ec8:	f000 fe4e 	bl	d5b68 <_ZN8SPIClass8transferEh>
   d4ecc:	e7f5      	b.n	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4ece:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4ed0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4ed4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4ed8:	ea09 0108 	and.w	r1, r9, r8
   d4edc:	b280      	uxth	r0, r0
   d4ede:	f001 fb10 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4ee2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ee6:	2101      	movs	r1, #1
   d4ee8:	b280      	uxth	r0, r0
   d4eea:	f001 fb0a 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4eee:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ef2:	2100      	movs	r1, #0
   d4ef4:	b280      	uxth	r0, r0
   d4ef6:	f001 fb04 	bl	d6502 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4efa:	3e01      	subs	r6, #1
   d4efc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4f00:	d1e8      	bne.n	d4ed4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4f02:	e7da      	b.n	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f08 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4f08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f0c:	1dda      	adds	r2, r3, #7
   d4f0e:	bf48      	it	mi
   d4f10:	f103 020e 	addmi.w	r2, r3, #14
   d4f14:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4f18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4f1a:	10d2      	asrs	r2, r2, #3
   d4f1c:	435a      	muls	r2, r3
   d4f1e:	2100      	movs	r1, #0
   d4f20:	f001 bb82 	b.w	d6628 <memset>

000d4f24 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4f24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f28:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f2c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f30:	4604      	mov	r4, r0
   d4f32:	460f      	mov	r7, r1
   d4f34:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f36:	b1b3      	cbz	r3, d4f66 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4f38:	4620      	mov	r0, r4
   d4f3a:	f7ff ffe5 	bl	d4f08 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4f3e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4f42:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4f46:	2820      	cmp	r0, #32
   d4f48:	dc1f      	bgt.n	d4f8a <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f4a:	2320      	movs	r3, #32
   d4f4c:	2201      	movs	r2, #1
   d4f4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4f52:	3820      	subs	r0, #32
   d4f54:	2373      	movs	r3, #115	; 0x73
   d4f56:	3973      	subs	r1, #115	; 0x73
   d4f58:	9300      	str	r3, [sp, #0]
   d4f5a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f5e:	4b89      	ldr	r3, [pc, #548]	; (d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4f60:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4f64:	e01f      	b.n	d4fa6 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f66:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f6a:	1dd8      	adds	r0, r3, #7
   d4f6c:	bf48      	it	mi
   d4f6e:	f103 000e 	addmi.w	r0, r3, #14
   d4f72:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4f76:	10c0      	asrs	r0, r0, #3
   d4f78:	4358      	muls	r0, r3
   d4f7a:	f000 fcef 	bl	d595c <malloc>
   d4f7e:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4f80:	2800      	cmp	r0, #0
   d4f82:	d1d9      	bne.n	d4f38 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4f84:	b004      	add	sp, #16
   d4f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4f8a:	2340      	movs	r3, #64	; 0x40
   d4f8c:	f04f 0c01 	mov.w	ip, #1
   d4f90:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4f94:	2352      	movs	r3, #82	; 0x52
   d4f96:	3840      	subs	r0, #64	; 0x40
   d4f98:	3952      	subs	r1, #82	; 0x52
   d4f9a:	9300      	str	r3, [sp, #0]
   d4f9c:	4b7a      	ldr	r3, [pc, #488]	; (d5188 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4f9e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4fa2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4fa6:	f340 024f 	sbfx	r2, r0, #1, #16
   d4faa:	f341 014f 	sbfx	r1, r1, #1, #16
   d4fae:	4620      	mov	r0, r4
   d4fb0:	f7ff fb0c 	bl	d45cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4fb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4fb6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4fba:	2800      	cmp	r0, #0
   d4fbc:	d078      	beq.n	d50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4fbe:	2d00      	cmp	r5, #0
   d4fc0:	d174      	bne.n	d50ac <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4fc2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4fc6:	2b20      	cmp	r3, #32
   d4fc8:	bf0c      	ite	eq
   d4fca:	253c      	moveq	r5, #60	; 0x3c
   d4fcc:	253d      	movne	r5, #61	; 0x3d
   d4fce:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d4fd2:	f1b8 0f00 	cmp.w	r8, #0
   d4fd6:	d001      	beq.n	d4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4fd8:	f001 f942 	bl	d6260 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d4fdc:	b1fe      	cbz	r6, d501e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d4fde:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fe2:	2800      	cmp	r0, #0
   d4fe4:	db1b      	blt.n	d501e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d4fe6:	2101      	movs	r1, #1
   d4fe8:	b280      	uxth	r0, r0
   d4fea:	f001 fa79 	bl	d64e0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d4fee:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4ff2:	2101      	movs	r1, #1
   d4ff4:	b280      	uxth	r0, r0
   d4ff6:	f001 fa84 	bl	d6502 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d4ffa:	2001      	movs	r0, #1
   d4ffc:	f000 fea0 	bl	d5d40 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5000:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5004:	2100      	movs	r1, #0
   d5006:	b280      	uxth	r0, r0
   d5008:	f001 fa7b 	bl	d6502 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d500c:	200a      	movs	r0, #10
   d500e:	f000 fe97 	bl	d5d40 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5012:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5016:	2101      	movs	r1, #1
   d5018:	b280      	uxth	r0, r0
   d501a:	f001 fa72 	bl	d6502 <digitalWrite>
  TRANSACTION_START
   d501e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5020:	2800      	cmp	r0, #0
   d5022:	d074      	beq.n	d510e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5026:	f001 f917 	bl	d6258 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d502a:	2204      	movs	r2, #4
   d502c:	4957      	ldr	r1, [pc, #348]	; (d518c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d502e:	4620      	mov	r0, r4
   d5030:	f7ff ff0d 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5034:	7aa1      	ldrb	r1, [r4, #10]
   d5036:	3901      	subs	r1, #1
   d5038:	b2c9      	uxtb	r1, r1
   d503a:	4620      	mov	r0, r4
   d503c:	f7ff fea0 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5040:	4953      	ldr	r1, [pc, #332]	; (d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5042:	2204      	movs	r2, #4
   d5044:	4620      	mov	r0, r4
   d5046:	f7ff ff02 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d504a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d504e:	2b01      	cmp	r3, #1
   d5050:	bf0c      	ite	eq
   d5052:	2110      	moveq	r1, #16
   d5054:	2114      	movne	r1, #20
   d5056:	4620      	mov	r0, r4
   d5058:	f7ff fe92 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d505c:	2204      	movs	r2, #4
   d505e:	494d      	ldr	r1, [pc, #308]	; (d5194 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5060:	4620      	mov	r0, r4
   d5062:	f7ff fef4 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5066:	68a3      	ldr	r3, [r4, #8]
   d5068:	4a4b      	ldr	r2, [pc, #300]	; (d5198 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d506a:	4293      	cmp	r3, r2
   d506c:	d15c      	bne.n	d5128 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d506e:	494b      	ldr	r1, [pc, #300]	; (d519c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5070:	2204      	movs	r2, #4
   d5072:	4620      	mov	r0, r4
   d5074:	f7ff feeb 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5078:	21d9      	movs	r1, #217	; 0xd9
   d507a:	4620      	mov	r0, r4
   d507c:	f7ff fe80 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5080:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5084:	2b01      	cmp	r3, #1
   d5086:	bf0c      	ite	eq
   d5088:	2122      	moveq	r1, #34	; 0x22
   d508a:	21f1      	movne	r1, #241	; 0xf1
   d508c:	4620      	mov	r0, r4
   d508e:	f7ff fe77 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5092:	4620      	mov	r0, r4
   d5094:	4942      	ldr	r1, [pc, #264]	; (d51a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5096:	2206      	movs	r2, #6
   d5098:	f7ff fed9 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d509c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d509e:	2800      	cmp	r0, #0
   d50a0:	d063      	beq.n	d516a <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d50a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d50a4:	f001 f8d8 	bl	d6258 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d50a8:	2001      	movs	r0, #1
   d50aa:	e76b      	b.n	d4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50ac:	b26d      	sxtb	r5, r5
   d50ae:	e78e      	b.n	d4fce <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d50b0:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d50b4:	2101      	movs	r1, #1
   d50b6:	b280      	uxth	r0, r0
   d50b8:	f001 fa12 	bl	d64e0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d50bc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50c0:	2101      	movs	r1, #1
   d50c2:	b280      	uxth	r0, r0
   d50c4:	f001 fa0c 	bl	d64e0 <pinMode>
    SSD1306_DESELECT
   d50c8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50cc:	2101      	movs	r1, #1
   d50ce:	b280      	uxth	r0, r0
   d50d0:	f001 fa17 	bl	d6502 <digitalWrite>
    if(spi) { // Hardware SPI
   d50d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d50d6:	b13d      	cbz	r5, d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d50d8:	f1b8 0f00 	cmp.w	r8, #0
   d50dc:	f43f af7e 	beq.w	d4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d50e0:	4628      	mov	r0, r5
   d50e2:	f000 fca9 	bl	d5a38 <_ZN8SPIClass5beginEv>
   d50e6:	e779      	b.n	d4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d50e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d50ec:	2101      	movs	r1, #1
   d50ee:	b280      	uxth	r0, r0
   d50f0:	f001 f9f6 	bl	d64e0 <pinMode>
      pinMode(clkPin , OUTPUT);
   d50f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d50f8:	2101      	movs	r1, #1
   d50fa:	b280      	uxth	r0, r0
   d50fc:	f001 f9f0 	bl	d64e0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5100:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5104:	4629      	mov	r1, r5
   d5106:	b280      	uxth	r0, r0
   d5108:	f001 f9fb 	bl	d6502 <digitalWrite>
   d510c:	e766      	b.n	d4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d510e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5110:	b118      	cbz	r0, d511a <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5112:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5116:	f000 fcb9 	bl	d5a8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d511a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d511e:	2100      	movs	r1, #0
   d5120:	b280      	uxth	r0, r0
   d5122:	f001 f9ee 	bl	d6502 <digitalWrite>
   d5126:	e780      	b.n	d502a <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5128:	4a1e      	ldr	r2, [pc, #120]	; (d51a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d512a:	4293      	cmp	r3, r2
   d512c:	d10e      	bne.n	d514c <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d512e:	491e      	ldr	r1, [pc, #120]	; (d51a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5130:	2203      	movs	r2, #3
   d5132:	4620      	mov	r0, r4
   d5134:	f7ff fe8b 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5138:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d513c:	2b01      	cmp	r3, #1
   d513e:	bf0c      	ite	eq
   d5140:	219f      	moveq	r1, #159	; 0x9f
   d5142:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5144:	4620      	mov	r0, r4
   d5146:	f7ff fe1b 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d514a:	e795      	b.n	d5078 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d514c:	4a17      	ldr	r2, [pc, #92]	; (d51ac <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d514e:	4293      	cmp	r3, r2
   d5150:	d192      	bne.n	d5078 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5152:	4917      	ldr	r1, [pc, #92]	; (d51b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5154:	2203      	movs	r2, #3
   d5156:	4620      	mov	r0, r4
   d5158:	f7ff fe79 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d515c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5160:	2b01      	cmp	r3, #1
   d5162:	bf0c      	ite	eq
   d5164:	2110      	moveq	r1, #16
   d5166:	21af      	movne	r1, #175	; 0xaf
   d5168:	e7ec      	b.n	d5144 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d516a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d516e:	2101      	movs	r1, #1
   d5170:	b280      	uxth	r0, r0
   d5172:	f001 f9c6 	bl	d6502 <digitalWrite>
   d5176:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5178:	2800      	cmp	r0, #0
   d517a:	d095      	beq.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d517c:	f000 fc6d 	bl	d5a5a <_ZN8SPIClass14endTransactionEv>
   d5180:	e792      	b.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5182:	bf00      	nop
   d5184:	000d6f6c 	.word	0x000d6f6c
   d5188:	000d6cac 	.word	0x000d6cac
   d518c:	000d71b4 	.word	0x000d71b4
   d5190:	000d71b8 	.word	0x000d71b8
   d5194:	000d71bc 	.word	0x000d71bc
   d5198:	00200080 	.word	0x00200080
   d519c:	000d71c6 	.word	0x000d71c6
   d51a0:	000d71c0 	.word	0x000d71c0
   d51a4:	00400080 	.word	0x00400080
   d51a8:	000d71ca 	.word	0x000d71ca
   d51ac:	00100060 	.word	0x00100060
   d51b0:	000d71cd 	.word	0x000d71cd

000d51b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51b4:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51b6:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51b8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51bc:	db3d      	blt.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51be:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51c2:	4294      	cmp	r4, r2
   d51c4:	dd39      	ble.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d51c6:	2900      	cmp	r1, #0
      w += x;
   d51c8:	bfbe      	ittt	lt
   d51ca:	185b      	addlt	r3, r3, r1
   d51cc:	b21b      	sxthlt	r3, r3
      x  = 0;
   d51ce:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d51d0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d51d4:	18ce      	adds	r6, r1, r3
   d51d6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d51d8:	bfc4      	itt	gt
   d51da:	1a63      	subgt	r3, r4, r1
   d51dc:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d51de:	2b00      	cmp	r3, #0
   d51e0:	dd2b      	ble.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d51e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d51e4:	10d6      	asrs	r6, r2, #3
   d51e6:	fb14 1106 	smlabb	r1, r4, r6, r1
   d51ea:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d51ec:	f002 0007 	and.w	r0, r2, #7
   d51f0:	2201      	movs	r2, #1
   d51f2:	4082      	lsls	r2, r0
      switch(color) {
   d51f4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d51f6:	b2d2      	uxtb	r2, r2
      switch(color) {
   d51f8:	d016      	beq.n	d5228 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d51fa:	2d02      	cmp	r5, #2
   d51fc:	d00b      	beq.n	d5216 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d51fe:	b9e5      	cbnz	r5, d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5200:	43d2      	mvns	r2, r2
   d5202:	b2d2      	uxtb	r2, r2
   d5204:	440b      	add	r3, r1
   d5206:	4299      	cmp	r1, r3
   d5208:	d017      	beq.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d520a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d520e:	4010      	ands	r0, r2
   d5210:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5214:	e7f7      	b.n	d5206 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5216:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5218:	4299      	cmp	r1, r3
   d521a:	d00e      	beq.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d521c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5220:	4050      	eors	r0, r2
   d5222:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5226:	e7f7      	b.n	d5218 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5228:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d522a:	4299      	cmp	r1, r3
   d522c:	d005      	beq.n	d523a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d522e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5232:	4310      	orrs	r0, r2
   d5234:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5238:	e7f7      	b.n	d522a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d523a:	bd70      	pop	{r4, r5, r6, pc}

000d523c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d523c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d523e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5240:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5244:	db76      	blt.n	d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5246:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d524a:	42a9      	cmp	r1, r5
   d524c:	da72      	bge.n	d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d524e:	2a00      	cmp	r2, #0
      __h += __y;
   d5250:	bfbc      	itt	lt
   d5252:	18d2      	addlt	r2, r2, r3
   d5254:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5256:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d525a:	bfb8      	it	lt
   d525c:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d525e:	18d7      	adds	r7, r2, r3
   d5260:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5262:	bfc4      	itt	gt
   d5264:	1aa3      	subgt	r3, r4, r2
   d5266:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5268:	2b00      	cmp	r3, #0
   d526a:	dd63      	ble.n	d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d526c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5270:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5272:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5276:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d527a:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d527c:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5280:	d023      	beq.n	d52ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5282:	f1c2 0208 	rsb	r2, r2, #8
   d5286:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5288:	4d2c      	ldr	r5, [pc, #176]	; (d533c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d528a:	4293      	cmp	r3, r2
   d528c:	bf3c      	itt	cc
   d528e:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5292:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5296:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5298:	bf3c      	itt	cc
   d529a:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d529e:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d52a2:	2e01      	cmp	r6, #1
   d52a4:	d007      	beq.n	d52b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d52a6:	2e02      	cmp	r6, #2
   d52a8:	d02e      	beq.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d52aa:	b94e      	cbnz	r6, d52c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d52ac:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52b0:	ea2c 0505 	bic.w	r5, ip, r5
   d52b4:	e003      	b.n	d52be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d52b6:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52ba:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d52be:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d52c0:	4293      	cmp	r3, r2
   d52c2:	d337      	bcc.n	d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d52c4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d52c8:	440c      	add	r4, r1
        h -= mod;
   d52ca:	1a9a      	subs	r2, r3, r2
   d52cc:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d52ce:	2a07      	cmp	r2, #7
   d52d0:	d90e      	bls.n	d52f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d52d2:	2e02      	cmp	r6, #2
   d52d4:	d11d      	bne.n	d5312 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d52d6:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d52d8:	7821      	ldrb	r1, [r4, #0]
   d52da:	43c9      	mvns	r1, r1
   d52dc:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d52de:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52e0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d52e4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d52e6:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52e8:	440c      	add	r4, r1
            } while(h >= 8);
   d52ea:	d8f5      	bhi.n	d52d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d52ec:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d52f0:	b302      	cbz	r2, d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52f2:	4b13      	ldr	r3, [pc, #76]	; (d5340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d52f4:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52f6:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d52f8:	d019      	beq.n	d532e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d52fa:	2e02      	cmp	r6, #2
   d52fc:	d01b      	beq.n	d5336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d52fe:	b9ce      	cbnz	r6, d5334 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5300:	7822      	ldrb	r2, [r4, #0]
   d5302:	ea22 0303 	bic.w	r3, r2, r3
   d5306:	e014      	b.n	d5332 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5308:	f817 c001 	ldrb.w	ip, [r7, r1]
   d530c:	ea85 050c 	eor.w	r5, r5, ip
   d5310:	e7d5      	b.n	d52be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5312:	2e00      	cmp	r6, #0
   d5314:	bf14      	ite	ne
   d5316:	25ff      	movne	r5, #255	; 0xff
   d5318:	2500      	moveq	r5, #0
   d531a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d531c:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d531e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5320:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5324:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5326:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5328:	440c      	add	r4, r1
            } while(h >= 8);
   d532a:	d8f7      	bhi.n	d531c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d532c:	e7de      	b.n	d52ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d532e:	7822      	ldrb	r2, [r4, #0]
   d5330:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5332:	7023      	strb	r3, [r4, #0]
}
   d5334:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5336:	7822      	ldrb	r2, [r4, #0]
   d5338:	4053      	eors	r3, r2
   d533a:	e7fa      	b.n	d5332 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d533c:	000d71a4 	.word	0x000d71a4
   d5340:	000d71ac 	.word	0x000d71ac

000d5344 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5344:	b470      	push	{r4, r5, r6}
   d5346:	4614      	mov	r4, r2
  switch(rotation) {
   d5348:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d534a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d534e:	2a02      	cmp	r2, #2
   d5350:	d00d      	beq.n	d536e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5352:	2a03      	cmp	r2, #3
   d5354:	d018      	beq.n	d5388 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5356:	2a01      	cmp	r2, #1
   d5358:	d111      	bne.n	d537e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d535a:	8902      	ldrh	r2, [r0, #8]
   d535c:	43e4      	mvns	r4, r4
   d535e:	4414      	add	r4, r2
   d5360:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5362:	9603      	str	r6, [sp, #12]
   d5364:	460a      	mov	r2, r1
   d5366:	4621      	mov	r1, r4
}
   d5368:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d536a:	f7ff bf67 	b.w	d523c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d536e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5370:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5372:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5374:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5376:	4414      	add	r4, r2
    x -= (w-1);
   d5378:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d537a:	b224      	sxth	r4, r4
    x -= (w-1);
   d537c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d537e:	9603      	str	r6, [sp, #12]
   d5380:	4622      	mov	r2, r4
}
   d5382:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5384:	f7ff bf16 	b.w	d51b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5388:	8945      	ldrh	r5, [r0, #10]
   d538a:	4419      	add	r1, r3
   d538c:	1a69      	subs	r1, r5, r1
   d538e:	b209      	sxth	r1, r1
    break;
   d5390:	e7e7      	b.n	d5362 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5392 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5392:	b430      	push	{r4, r5}
   d5394:	4614      	mov	r4, r2
  switch(rotation) {
   d5396:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5398:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d539c:	2a02      	cmp	r2, #2
   d539e:	d00d      	beq.n	d53bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d53a0:	2a03      	cmp	r2, #3
   d53a2:	d018      	beq.n	d53d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d53a4:	2a01      	cmp	r2, #1
   d53a6:	d111      	bne.n	d53cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d53a8:	18e2      	adds	r2, r4, r3
   d53aa:	8904      	ldrh	r4, [r0, #8]
   d53ac:	1aa4      	subs	r4, r4, r2
   d53ae:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53b0:	9502      	str	r5, [sp, #8]
   d53b2:	460a      	mov	r2, r1
   d53b4:	4621      	mov	r1, r4
}
   d53b6:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53b8:	f7ff befc 	b.w	d51b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d53bc:	8902      	ldrh	r2, [r0, #8]
   d53be:	43c9      	mvns	r1, r1
   d53c0:	4411      	add	r1, r2
    y -= (h-1);
   d53c2:	18e2      	adds	r2, r4, r3
   d53c4:	8944      	ldrh	r4, [r0, #10]
   d53c6:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d53c8:	b209      	sxth	r1, r1
    y -= (h-1);
   d53ca:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d53cc:	9502      	str	r5, [sp, #8]
   d53ce:	4622      	mov	r2, r4
}
   d53d0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d53d2:	f7ff bf33 	b.w	d523c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d53d6:	8942      	ldrh	r2, [r0, #10]
   d53d8:	43c9      	mvns	r1, r1
   d53da:	4411      	add	r1, r2
   d53dc:	b209      	sxth	r1, r1
    break;
   d53de:	e7e7      	b.n	d53b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d53e0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d53e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d53e4:	4604      	mov	r4, r0
  TRANSACTION_START
   d53e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d53e8:	2800      	cmp	r0, #0
   d53ea:	d042      	beq.n	d5472 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d53ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d53ee:	f000 ff33 	bl	d6258 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d53f2:	4947      	ldr	r1, [pc, #284]	; (d5510 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d53f4:	2205      	movs	r2, #5
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7ff fd29 	bl	d4e4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d53fc:	7a21      	ldrb	r1, [r4, #8]
   d53fe:	3901      	subs	r1, #1
   d5400:	4620      	mov	r0, r4
   d5402:	b2c9      	uxtb	r1, r1
   d5404:	f7ff fcbc 	bl	d4d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5408:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d540c:	1dde      	adds	r6, r3, #7
   d540e:	bf48      	it	mi
   d5410:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5414:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5418:	8923      	ldrh	r3, [r4, #8]
   d541a:	10f6      	asrs	r6, r6, #3
   d541c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5420:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5424:	2800      	cmp	r0, #0
   d5426:	d03a      	beq.n	d549e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5428:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d542c:	f000 ff22 	bl	d6274 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5432:	6803      	ldr	r3, [r0, #0]
   d5434:	2140      	movs	r1, #64	; 0x40
   d5436:	689b      	ldr	r3, [r3, #8]
   d5438:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d543a:	2701      	movs	r7, #1
    while(count--) {
   d543c:	42b5      	cmp	r5, r6
   d543e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5440:	d024      	beq.n	d548c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5442:	2f1f      	cmp	r7, #31
   d5444:	d90c      	bls.n	d5460 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5446:	f000 ff1c 	bl	d6282 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d544a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d544e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5450:	f000 ff10 	bl	d6274 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5454:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5456:	6803      	ldr	r3, [r0, #0]
   d5458:	2140      	movs	r1, #64	; 0x40
   d545a:	689b      	ldr	r3, [r3, #8]
   d545c:	4798      	blx	r3
        bytesOut = 1;
   d545e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5462:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5466:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5468:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d546a:	689b      	ldr	r3, [r3, #8]
   d546c:	4798      	blx	r3
      bytesOut++;
   d546e:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5470:	e7e4      	b.n	d543c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5472:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5474:	b118      	cbz	r0, d547e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5476:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d547a:	f000 fb07 	bl	d5a8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d547e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5482:	2100      	movs	r1, #0
   d5484:	b280      	uxth	r0, r0
   d5486:	f001 f83c 	bl	d6502 <digitalWrite>
   d548a:	e7b2      	b.n	d53f2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d548c:	f000 fef9 	bl	d6282 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5490:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5492:	b378      	cbz	r0, d54f4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5494:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d549a:	f000 bedd 	b.w	d6258 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d549e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d54a2:	2101      	movs	r1, #1
   d54a4:	b280      	uxth	r0, r0
   d54a6:	f001 f82c 	bl	d6502 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d54aa:	42b5      	cmp	r5, r6
   d54ac:	d0f0      	beq.n	d5490 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d54ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d54b0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d54b4:	b118      	cbz	r0, d54be <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d54b6:	4649      	mov	r1, r9
   d54b8:	f000 fb56 	bl	d5b68 <_ZN8SPIClass8transferEh>
   d54bc:	e7f5      	b.n	d54aa <_ZN16Adafruit_SSD13067displayEv+0xca>
   d54be:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54c0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d54c4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d54c8:	ea09 0108 	and.w	r1, r9, r8
   d54cc:	b280      	uxth	r0, r0
   d54ce:	f001 f818 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d54d2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54d6:	2101      	movs	r1, #1
   d54d8:	b280      	uxth	r0, r0
   d54da:	f001 f812 	bl	d6502 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d54de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54e2:	2100      	movs	r1, #0
   d54e4:	b280      	uxth	r0, r0
   d54e6:	f001 f80c 	bl	d6502 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54ea:	3f01      	subs	r7, #1
   d54ec:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d54f0:	d1e8      	bne.n	d54c4 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d54f2:	e7da      	b.n	d54aa <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d54f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54f8:	2101      	movs	r1, #1
   d54fa:	b280      	uxth	r0, r0
   d54fc:	f001 f801 	bl	d6502 <digitalWrite>
   d5500:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5502:	b118      	cbz	r0, d550c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5504:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5508:	f000 baa7 	b.w	d5a5a <_ZN8SPIClass14endTransactionEv>
}
   d550c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5510:	000d71d0 	.word	0x000d71d0

000d5514 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <netdb_freeaddrinfo+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	689b      	ldr	r3, [r3, #8]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030268 	.word	0x00030268

000d5524 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <netdb_getaddrinfo+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	68db      	ldr	r3, [r3, #12]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030268 	.word	0x00030268

000d5534 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_Pin_Mode+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	689b      	ldr	r3, [r3, #8]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003022c 	.word	0x0003022c

000d5544 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_Get_Pin_Mode+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	68db      	ldr	r3, [r3, #12]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003022c 	.word	0x0003022c

000d5554 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <HAL_GPIO_Write+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	691b      	ldr	r3, [r3, #16]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003022c 	.word	0x0003022c

000d5564 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_GPIO_Read+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	695b      	ldr	r3, [r3, #20]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003022c 	.word	0x0003022c

000d5574 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_Interrupts_Attach+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	699b      	ldr	r3, [r3, #24]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003022c 	.word	0x0003022c

000d5584 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_Interrupts_Detach+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	69db      	ldr	r3, [r3, #28]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003022c 	.word	0x0003022c

000d5594 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_RNG_GetRandomNumber+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	685b      	ldr	r3, [r3, #4]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030218 	.word	0x00030218

000d55a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_Delay_Microseconds+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	68db      	ldr	r3, [r3, #12]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030218 	.word	0x00030218

000d55b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	695b      	ldr	r3, [r3, #20]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030218 	.word	0x00030218

000d55c4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <os_mutex_create+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030248 	.word	0x00030248

000d55d4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <os_mutex_destroy+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030248 	.word	0x00030248

000d55e4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <os_mutex_recursive_create+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030248 	.word	0x00030248

000d55f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <os_mutex_recursive_destroy+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030248 	.word	0x00030248

000d5604 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <inet_inet_ntop+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	695b      	ldr	r3, [r3, #20]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030264 	.word	0x00030264

000d5614 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <hal_usart_init+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	681b      	ldr	r3, [r3, #0]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	0003023c 	.word	0x0003023c

000d5624 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <hal_usart_write+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	68db      	ldr	r3, [r3, #12]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	0003023c 	.word	0x0003023c

000d5634 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <hal_usart_available+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	691b      	ldr	r3, [r3, #16]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003023c 	.word	0x0003023c

000d5644 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <hal_usart_read+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	695b      	ldr	r3, [r3, #20]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003023c 	.word	0x0003023c

000d5654 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <hal_usart_peek+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	699b      	ldr	r3, [r3, #24]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003023c 	.word	0x0003023c

000d5664 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <hal_usart_flush+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	69db      	ldr	r3, [r3, #28]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003023c 	.word	0x0003023c

000d5674 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <hal_usart_is_enabled+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6a1b      	ldr	r3, [r3, #32]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003023c 	.word	0x0003023c

000d5684 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <hal_usart_available_data_for_write+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003023c 	.word	0x0003023c

000d5694 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <hal_i2c_set_speed+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	681b      	ldr	r3, [r3, #0]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030228 	.word	0x00030228

000d56a4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <hal_i2c_begin+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	68db      	ldr	r3, [r3, #12]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030228 	.word	0x00030228

000d56b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <hal_i2c_begin_transmission+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	699b      	ldr	r3, [r3, #24]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030228 	.word	0x00030228

000d56c4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <hal_i2c_end_transmission+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	69db      	ldr	r3, [r3, #28]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030228 	.word	0x00030228

000d56d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <hal_i2c_write+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6a1b      	ldr	r3, [r3, #32]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030228 	.word	0x00030228

000d56e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <hal_i2c_available+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030228 	.word	0x00030228

000d56f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <hal_i2c_read+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030228 	.word	0x00030228

000d5704 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <hal_i2c_peek+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030228 	.word	0x00030228

000d5714 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <hal_i2c_flush+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030228 	.word	0x00030228

000d5724 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <hal_i2c_is_enabled+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030228 	.word	0x00030228

000d5734 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <hal_i2c_init+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030228 	.word	0x00030228

000d5744 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <hal_spi_begin+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	681b      	ldr	r3, [r3, #0]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030230 	.word	0x00030230

000d5754 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <hal_spi_transfer+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	695b      	ldr	r3, [r3, #20]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030230 	.word	0x00030230

000d5764 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <hal_spi_init+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	69db      	ldr	r3, [r3, #28]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030230 	.word	0x00030230

000d5774 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <hal_spi_is_enabled+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6a1b      	ldr	r3, [r3, #32]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030230 	.word	0x00030230

000d5784 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <hal_spi_info+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030230 	.word	0x00030230

000d5794 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <hal_spi_set_settings+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030230 	.word	0x00030230

000d57a4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <hal_spi_acquire+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030230 	.word	0x00030230

000d57b4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <hal_spi_release+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030230 	.word	0x00030230

000d57c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <HAL_USB_USART_Init+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	681b      	ldr	r3, [r3, #0]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003024c 	.word	0x0003024c

000d57d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <HAL_USB_USART_Available_Data+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	691b      	ldr	r3, [r3, #16]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003024c 	.word	0x0003024c

000d57e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	695b      	ldr	r3, [r3, #20]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	0003024c 	.word	0x0003024c

000d57f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <HAL_USB_USART_Receive_Data+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	699b      	ldr	r3, [r3, #24]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	0003024c 	.word	0x0003024c

000d5804 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <HAL_USB_USART_Send_Data+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	69db      	ldr	r3, [r3, #28]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	0003024c 	.word	0x0003024c

000d5814 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <HAL_USB_USART_Flush_Data+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6a1b      	ldr	r3, [r3, #32]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	0003024c 	.word	0x0003024c

000d5824 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <panic_+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030260 	.word	0x00030260

000d5834 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <set_system_mode+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	685b      	ldr	r3, [r3, #4]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030220 	.word	0x00030220

000d5844 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <system_delay_ms+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030220 	.word	0x00030220

000d5854 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <system_thread_set_state+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030220 	.word	0x00030220

000d5864 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b03      	ldr	r3, [pc, #12]	; (d5874 <system_ctrl_set_app_request_handler+0x10>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d586e:	9301      	str	r3, [sp, #4]
   d5870:	bd08      	pop	{r3, pc}
   d5872:	0000      	.short	0x0000
   d5874:	00030220 	.word	0x00030220

000d5878 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b03      	ldr	r3, [pc, #12]	; (d5888 <system_ctrl_set_result+0x10>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5882:	9301      	str	r3, [sp, #4]
   d5884:	bd08      	pop	{r3, pc}
   d5886:	0000      	.short	0x0000
   d5888:	00030220 	.word	0x00030220

000d588c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <network_connect+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	685b      	ldr	r3, [r3, #4]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030240 	.word	0x00030240

000d589c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <network_connecting+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	689b      	ldr	r3, [r3, #8]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030240 	.word	0x00030240

000d58ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <network_disconnect+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	68db      	ldr	r3, [r3, #12]
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030240 	.word	0x00030240

000d58bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <network_ready+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	691b      	ldr	r3, [r3, #16]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030240 	.word	0x00030240

000d58cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <network_on+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	695b      	ldr	r3, [r3, #20]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030240 	.word	0x00030240

000d58dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <network_off+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	699b      	ldr	r3, [r3, #24]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030240 	.word	0x00030240

000d58ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <network_listen+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	69db      	ldr	r3, [r3, #28]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030240 	.word	0x00030240

000d58fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <network_listening+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	6a1b      	ldr	r3, [r3, #32]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030240 	.word	0x00030240

000d590c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <network_set_listen_timeout+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030240 	.word	0x00030240

000d591c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <network_get_listen_timeout+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030240 	.word	0x00030240

000d592c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <network_is_on+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030240 	.word	0x00030240

000d593c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <network_is_off+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030240 	.word	0x00030240

000d594c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030244 	.word	0x00030244

000d595c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <malloc+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	681b      	ldr	r3, [r3, #0]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	0003021c 	.word	0x0003021c

000d596c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <free+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	685b      	ldr	r3, [r3, #4]
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	0003021c 	.word	0x0003021c

000d597c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <vsnprintf+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003021c 	.word	0x0003021c

000d598c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <newlib_impure_ptr_callback+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003021c 	.word	0x0003021c

000d599c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d599c:	2200      	movs	r2, #0
   d599e:	6840      	ldr	r0, [r0, #4]
   d59a0:	4611      	mov	r1, r2
   d59a2:	f7ff bfab 	b.w	d58fc <network_listening>

000d59a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59a6:	2200      	movs	r2, #0
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	4611      	mov	r1, r2
   d59ac:	f7ff bfb6 	b.w	d591c <network_get_listen_timeout>

000d59b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	2200      	movs	r2, #0
   d59b4:	f7ff bfaa 	b.w	d590c <network_set_listen_timeout>

000d59b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	2200      	movs	r2, #0
   d59bc:	f081 0101 	eor.w	r1, r1, #1
   d59c0:	f7ff bf94 	b.w	d58ec <network_listen>

000d59c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59c4:	2300      	movs	r3, #0
   d59c6:	6840      	ldr	r0, [r0, #4]
   d59c8:	461a      	mov	r2, r3
   d59ca:	4619      	mov	r1, r3
   d59cc:	f7ff bf86 	b.w	d58dc <network_off>

000d59d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59d0:	2300      	movs	r3, #0
   d59d2:	6840      	ldr	r0, [r0, #4]
   d59d4:	461a      	mov	r2, r3
   d59d6:	4619      	mov	r1, r3
   d59d8:	f7ff bf78 	b.w	d58cc <network_on>

000d59dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59dc:	2200      	movs	r2, #0
   d59de:	6840      	ldr	r0, [r0, #4]
   d59e0:	4611      	mov	r1, r2
   d59e2:	f7ff bf6b 	b.w	d58bc <network_ready>

000d59e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59e6:	2200      	movs	r2, #0
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	4611      	mov	r1, r2
   d59ec:	f7ff bf56 	b.w	d589c <network_connecting>

000d59f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59f0:	6840      	ldr	r0, [r0, #4]
   d59f2:	2200      	movs	r2, #0
   d59f4:	2102      	movs	r1, #2
   d59f6:	f7ff bf59 	b.w	d58ac <network_disconnect>

000d59fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d59fa:	2300      	movs	r3, #0
   d59fc:	6840      	ldr	r0, [r0, #4]
   d59fe:	461a      	mov	r2, r3
   d5a00:	f7ff bf44 	b.w	d588c <network_connect>

000d5a04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a04:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a06:	2203      	movs	r2, #3
   d5a08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a0a:	4a02      	ldr	r2, [pc, #8]	; (d5a14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a0e:	4770      	bx	lr
   d5a10:	2003e650 	.word	0x2003e650
   d5a14:	000d71e0 	.word	0x000d71e0

000d5a18 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5a18:	2100      	movs	r1, #0
   d5a1a:	f7ff bec3 	b.w	d57a4 <hal_spi_acquire>

000d5a1e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5a1e:	2100      	movs	r1, #0
   d5a20:	f7ff bec8 	b.w	d57b4 <hal_spi_release>

000d5a24 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5a24:	b510      	push	{r4, lr}
   d5a26:	4604      	mov	r4, r0
   d5a28:	4608      	mov	r0, r1
{
    _spi = spi;
   d5a2a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a2c:	f7ff fe9a 	bl	d5764 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a30:	2300      	movs	r3, #0
   d5a32:	6063      	str	r3, [r4, #4]
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a38:	b510      	push	{r4, lr}
   d5a3a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a3c:	7800      	ldrb	r0, [r0, #0]
   d5a3e:	f7ff ffeb 	bl	d5a18 <_ZN8SPIClass4lockEv.isra.0>
   d5a42:	b948      	cbnz	r0, d5a58 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5a44:	7820      	ldrb	r0, [r4, #0]
   d5a46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a4a:	f7ff fe7b 	bl	d5744 <hal_spi_begin>
        unlock();
   d5a4e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5a54:	f7ff bfe3 	b.w	d5a1e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5a58:	bd10      	pop	{r4, pc}

000d5a5a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5a5a:	7800      	ldrb	r0, [r0, #0]
   d5a5c:	f7ff bfdf 	b.w	d5a1e <_ZN8SPIClass6unlockEv.isra.0>

000d5a60 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a60:	0840      	lsrs	r0, r0, #1
{
   d5a62:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5a64:	6018      	str	r0, [r3, #0]
   d5a66:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5a68:	6818      	ldr	r0, [r3, #0]
   d5a6a:	4288      	cmp	r0, r1
   d5a6c:	b2e5      	uxtb	r5, r4
   d5a6e:	d906      	bls.n	d5a7e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5a70:	3401      	adds	r4, #1
   d5a72:	2c08      	cmp	r4, #8
   d5a74:	d002      	beq.n	d5a7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5a76:	0840      	lsrs	r0, r0, #1
   d5a78:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5a7a:	e7f5      	b.n	d5a68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5a7c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5a80:	5d5b      	ldrb	r3, [r3, r5]
   d5a82:	7013      	strb	r3, [r2, #0]
}
   d5a84:	bd30      	pop	{r4, r5, pc}
   d5a86:	bf00      	nop
   d5a88:	000d7214 	.word	0x000d7214

000d5a8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a90:	4606      	mov	r6, r0
   d5a92:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5a94:	7800      	ldrb	r0, [r0, #0]
{
   d5a96:	460c      	mov	r4, r1
    CHECK(lock());
   d5a98:	f7ff ffbe 	bl	d5a18 <_ZN8SPIClass4lockEv.isra.0>
   d5a9c:	2800      	cmp	r0, #0
   d5a9e:	db1b      	blt.n	d5ad8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5aa0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5aa2:	2214      	movs	r2, #20
   d5aa4:	2100      	movs	r1, #0
   d5aa6:	a809      	add	r0, sp, #36	; 0x24
   d5aa8:	f000 fdbe 	bl	d6628 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5aac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5aae:	2200      	movs	r2, #0
   d5ab0:	a909      	add	r1, sp, #36	; 0x24
   d5ab2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ab4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5ab8:	f7ff fe64 	bl	d5784 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5abc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5ac0:	b113      	cbz	r3, d5ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5ac2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5ac6:	b155      	cbz	r5, d5ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5ac8:	2700      	movs	r7, #0
   d5aca:	46b9      	mov	r9, r7
   d5acc:	46b8      	mov	r8, r7
   d5ace:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5ad0:	7923      	ldrb	r3, [r4, #4]
   d5ad2:	b15d      	cbz	r5, d5aec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5ad4:	b1c3      	cbz	r3, d5b08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5ad6:	2000      	movs	r0, #0
}
   d5ad8:	b00f      	add	sp, #60	; 0x3c
   d5ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5ade:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5ae2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5ae6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5aea:	e7f1      	b.n	d5ad0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5aec:	2b00      	cmp	r3, #0
   d5aee:	d135      	bne.n	d5b5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5af0:	68a3      	ldr	r3, [r4, #8]
   d5af2:	4543      	cmp	r3, r8
   d5af4:	d108      	bne.n	d5b08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5af6:	f88d 9020 	strb.w	r9, [sp, #32]
   d5afa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5afe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b02:	89a3      	ldrh	r3, [r4, #12]
   d5b04:	429a      	cmp	r2, r3
   d5b06:	d0e6      	beq.n	d5ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5b08:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b0a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5b0c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b10:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5b12:	ab04      	add	r3, sp, #16
   d5b14:	f10d 020f 	add.w	r2, sp, #15
   d5b18:	f7ff ffa2 	bl	d5a60 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5b1c:	7921      	ldrb	r1, [r4, #4]
   d5b1e:	b985      	cbnz	r5, d5b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5b20:	b989      	cbnz	r1, d5b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b22:	68a3      	ldr	r3, [r4, #8]
   d5b24:	4543      	cmp	r3, r8
   d5b26:	d30e      	bcc.n	d5b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5b28:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b2c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b34:	89a3      	ldrh	r3, [r4, #12]
   d5b36:	429a      	cmp	r2, r3
   d5b38:	d105      	bne.n	d5b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b3a:	9b04      	ldr	r3, [sp, #16]
   d5b3c:	4543      	cmp	r3, r8
   d5b3e:	d102      	bne.n	d5b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b40:	e7c9      	b.n	d5ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5b42:	2900      	cmp	r1, #0
   d5b44:	d1f9      	bne.n	d5b3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5b46:	2300      	movs	r3, #0
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	7b63      	ldrb	r3, [r4, #13]
   d5b4c:	9300      	str	r3, [sp, #0]
   d5b4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b52:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5b54:	7830      	ldrb	r0, [r6, #0]
   d5b56:	f7ff fe1d 	bl	d5794 <hal_spi_set_settings>
   d5b5a:	e7bc      	b.n	d5ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5b5c:	e9cd 5500 	strd	r5, r5, [sp]
   d5b60:	462b      	mov	r3, r5
   d5b62:	462a      	mov	r2, r5
   d5b64:	2101      	movs	r1, #1
   d5b66:	e7f5      	b.n	d5b54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5b68 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b68:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5b6a:	7800      	ldrb	r0, [r0, #0]
   d5b6c:	f7ff fdf2 	bl	d5754 <hal_spi_transfer>
}
   d5b70:	b2c0      	uxtb	r0, r0
   d5b72:	bd08      	pop	{r3, pc}

000d5b74 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b74:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b76:	4b09      	ldr	r3, [pc, #36]	; (d5b9c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b78:	4c09      	ldr	r4, [pc, #36]	; (d5ba0 <_GLOBAL__sub_I_System+0x2c>)
   d5b7a:	2202      	movs	r2, #2
   d5b7c:	2000      	movs	r0, #0
   d5b7e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b80:	4b08      	ldr	r3, [pc, #32]	; (d5ba4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b82:	6020      	str	r0, [r4, #0]
   d5b84:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b86:	71a0      	strb	r0, [r4, #6]
   d5b88:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b8a:	f7ff fe53 	bl	d5834 <set_system_mode>
SystemClass System;
   d5b8e:	4620      	mov	r0, r4
   d5b90:	4a05      	ldr	r2, [pc, #20]	; (d5ba8 <_GLOBAL__sub_I_System+0x34>)
   d5b92:	4906      	ldr	r1, [pc, #24]	; (d5bac <_GLOBAL__sub_I_System+0x38>)
   d5b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5b98:	f000 bd20 	b.w	d65dc <__aeabi_atexit>
   d5b9c:	2003e664 	.word	0x2003e664
   d5ba0:	2003e658 	.word	0x2003e658
   d5ba4:	ffff0000 	.word	0xffff0000
   d5ba8:	2003e5b8 	.word	0x2003e5b8
   d5bac:	000d40dd 	.word	0x000d40dd

000d5bb0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5bb0:	b510      	push	{r4, lr}
   d5bb2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5bb4:	6800      	ldr	r0, [r0, #0]
   d5bb6:	b108      	cbz	r0, d5bbc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5bb8:	f7ff fd1c 	bl	d55f4 <os_mutex_recursive_destroy>
    }
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	bd10      	pop	{r4, pc}

000d5bc0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bc0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5bc2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5bc4:	4604      	mov	r4, r0
      if (_M_manager)
   d5bc6:	b113      	cbz	r3, d5bce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bc8:	2203      	movs	r2, #3
   d5bca:	4601      	mov	r1, r0
   d5bcc:	4798      	blx	r3
    }
   d5bce:	4620      	mov	r0, r4
   d5bd0:	bd10      	pop	{r4, pc}
	...

000d5bd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5bd4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5bd6:	4c06      	ldr	r4, [pc, #24]	; (d5bf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5bd8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5bda:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5bdc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5bde:	f7ff fd01 	bl	d55e4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5be2:	4620      	mov	r0, r4
   d5be4:	4a03      	ldr	r2, [pc, #12]	; (d5bf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5be6:	4904      	ldr	r1, [pc, #16]	; (d5bf8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5bec:	f000 bcf6 	b.w	d65dc <__aeabi_atexit>
   d5bf0:	2003e668 	.word	0x2003e668
   d5bf4:	2003e5b8 	.word	0x2003e5b8
   d5bf8:	000d5bb1 	.word	0x000d5bb1

000d5bfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bfe:	4606      	mov	r6, r0
   d5c00:	460d      	mov	r5, r1
  size_t n = 0;
   d5c02:	188f      	adds	r7, r1, r2
   d5c04:	2400      	movs	r4, #0
  while (size--) {
   d5c06:	42bd      	cmp	r5, r7
   d5c08:	d00c      	beq.n	d5c24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c0a:	6833      	ldr	r3, [r6, #0]
   d5c0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c10:	689b      	ldr	r3, [r3, #8]
   d5c12:	4630      	mov	r0, r6
   d5c14:	4798      	blx	r3
     if (chunk>=0)
   d5c16:	1e03      	subs	r3, r0, #0
   d5c18:	db01      	blt.n	d5c1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c1a:	441c      	add	r4, r3
  while (size--) {
   d5c1c:	e7f3      	b.n	d5c06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c1e:	2c00      	cmp	r4, #0
   d5c20:	bf08      	it	eq
   d5c22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c24:	4620      	mov	r0, r4
   d5c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c28:	b513      	push	{r0, r1, r4, lr}
   d5c2a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5c2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c2e:	b159      	cbz	r1, d5c48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c30:	9101      	str	r1, [sp, #4]
   d5c32:	f000 fd25 	bl	d6680 <strlen>
   d5c36:	6823      	ldr	r3, [r4, #0]
   d5c38:	9901      	ldr	r1, [sp, #4]
   d5c3a:	68db      	ldr	r3, [r3, #12]
   d5c3c:	4602      	mov	r2, r0
   d5c3e:	4620      	mov	r0, r4
    }
   d5c40:	b002      	add	sp, #8
   d5c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c46:	4718      	bx	r3
    }
   d5c48:	b002      	add	sp, #8
   d5c4a:	bd10      	pop	{r4, pc}

000d5c4c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5c4c:	b508      	push	{r3, lr}
  return write(str);
   d5c4e:	f7ff ffeb 	bl	d5c28 <_ZN5Print5writeEPKc>
}
   d5c52:	bd08      	pop	{r3, pc}

000d5c54 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5c54:	6803      	ldr	r3, [r0, #0]
   d5c56:	689b      	ldr	r3, [r3, #8]
   d5c58:	4718      	bx	r3

000d5c5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c5c:	210d      	movs	r1, #13
{
   d5c5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c60:	f7ff fff8 	bl	d5c54 <_ZN5Print5printEc>
  n += print('\n');
   d5c64:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5c66:	4604      	mov	r4, r0
  n += print('\n');
   d5c68:	4628      	mov	r0, r5
   d5c6a:	f7ff fff3 	bl	d5c54 <_ZN5Print5printEc>
  return n;
}
   d5c6e:	4420      	add	r0, r4
   d5c70:	bd38      	pop	{r3, r4, r5, pc}

000d5c72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c72:	b530      	push	{r4, r5, lr}
   d5c74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c76:	2300      	movs	r3, #0
   d5c78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c7c:	2a01      	cmp	r2, #1
   d5c7e:	bf98      	it	ls
   d5c80:	220a      	movls	r2, #10
   d5c82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5c84:	460d      	mov	r5, r1
   d5c86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5c8a:	fb01 5312 	mls	r3, r1, r2, r5
   d5c8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c92:	2b09      	cmp	r3, #9
   d5c94:	bf94      	ite	ls
   d5c96:	3330      	addls	r3, #48	; 0x30
   d5c98:	3337      	addhi	r3, #55	; 0x37
   d5c9a:	b2db      	uxtb	r3, r3
  } while(n);
   d5c9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ca2:	d9ef      	bls.n	d5c84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ca4:	4621      	mov	r1, r4
   d5ca6:	f7ff ffbf 	bl	d5c28 <_ZN5Print5writeEPKc>
}
   d5caa:	b00b      	add	sp, #44	; 0x2c
   d5cac:	bd30      	pop	{r4, r5, pc}

000d5cae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cb2:	b086      	sub	sp, #24
   d5cb4:	af00      	add	r7, sp, #0
   d5cb6:	4605      	mov	r5, r0
   d5cb8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5cba:	1d38      	adds	r0, r7, #4
   d5cbc:	2114      	movs	r1, #20
{
   d5cbe:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5cc0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5cc2:	f7ff fe5b 	bl	d597c <vsnprintf>

    if (n<bufsize)
   d5cc6:	2813      	cmp	r0, #19
   d5cc8:	d80e      	bhi.n	d5ce8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5cca:	1d39      	adds	r1, r7, #4
   d5ccc:	4628      	mov	r0, r5
   d5cce:	f7ff ffab 	bl	d5c28 <_ZN5Print5writeEPKc>
   d5cd2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5cd4:	b11e      	cbz	r6, d5cde <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	f7ff ffbf 	bl	d5c5a <_ZN5Print7printlnEv>
   d5cdc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5cde:	4620      	mov	r0, r4
   d5ce0:	3718      	adds	r7, #24
   d5ce2:	46bd      	mov	sp, r7
   d5ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5ce8:	f100 0308 	add.w	r3, r0, #8
   d5cec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5cf0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5cf2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5cf6:	4622      	mov	r2, r4
   d5cf8:	1c41      	adds	r1, r0, #1
   d5cfa:	683b      	ldr	r3, [r7, #0]
   d5cfc:	4668      	mov	r0, sp
   d5cfe:	f7ff fe3d 	bl	d597c <vsnprintf>
  return write(str);
   d5d02:	4669      	mov	r1, sp
   d5d04:	4628      	mov	r0, r5
   d5d06:	f7ff ff8f 	bl	d5c28 <_ZN5Print5writeEPKc>
   d5d0a:	4604      	mov	r4, r0
   d5d0c:	46c5      	mov	sp, r8
   d5d0e:	e7e1      	b.n	d5cd4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5d10 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5d10:	2300      	movs	r3, #0
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	461a      	mov	r2, r3
   d5d16:	4619      	mov	r1, r3
   d5d18:	f7ff bdd8 	b.w	d58cc <network_on>

000d5d1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d1c:	4b01      	ldr	r3, [pc, #4]	; (d5d24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d1e:	4a02      	ldr	r2, [pc, #8]	; (d5d28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5d22:	4770      	bx	lr
   d5d24:	2003e66c 	.word	0x2003e66c
   d5d28:	000d721c 	.word	0x000d721c

000d5d2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d2c:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5d34:	4770      	bx	lr
   d5d36:	bf00      	nop
   d5d38:	2003e550 	.word	0x2003e550
   d5d3c:	2003e670 	.word	0x2003e670

000d5d40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5d40:	2100      	movs	r1, #0
   d5d42:	f7ff bd7f 	b.w	d5844 <system_delay_ms>

000d5d46 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d46:	b510      	push	{r4, lr}
   d5d48:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d4a:	f7ff ff39 	bl	d5bc0 <_ZNSt14_Function_baseD1Ev>
   d5d4e:	4620      	mov	r0, r4
   d5d50:	bd10      	pop	{r4, pc}
	...

000d5d54 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5d54:	4803      	ldr	r0, [pc, #12]	; (d5d64 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d56:	4a04      	ldr	r2, [pc, #16]	; (d5d68 <_GLOBAL__sub_I_RGB+0x14>)
   d5d58:	4904      	ldr	r1, [pc, #16]	; (d5d6c <_GLOBAL__sub_I_RGB+0x18>)
   d5d5a:	2300      	movs	r3, #0
   d5d5c:	6083      	str	r3, [r0, #8]
   d5d5e:	f000 bc3d 	b.w	d65dc <__aeabi_atexit>
   d5d62:	bf00      	nop
   d5d64:	2003e674 	.word	0x2003e674
   d5d68:	2003e5b8 	.word	0x2003e5b8
   d5d6c:	000d5d47 	.word	0x000d5d47

000d5d70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5d70:	4b01      	ldr	r3, [pc, #4]	; (d5d78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5d72:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5d74:	4770      	bx	lr
   d5d76:	bf00      	nop
   d5d78:	2003e554 	.word	0x2003e554

000d5d7c <serialEventRun>:
{
   d5d7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d7e:	4b0b      	ldr	r3, [pc, #44]	; (d5dac <serialEventRun+0x30>)
   d5d80:	b143      	cbz	r3, d5d94 <serialEventRun+0x18>
   d5d82:	f000 f957 	bl	d6034 <_Z16_fetch_usbserialv>
   d5d86:	6803      	ldr	r3, [r0, #0]
   d5d88:	691b      	ldr	r3, [r3, #16]
   d5d8a:	4798      	blx	r3
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	dd01      	ble.n	d5d94 <serialEventRun+0x18>
        serialEvent();
   d5d90:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5d94:	4b06      	ldr	r3, [pc, #24]	; (d5db0 <serialEventRun+0x34>)
   d5d96:	b143      	cbz	r3, d5daa <serialEventRun+0x2e>
   d5d98:	f000 f9f6 	bl	d6188 <_Z22__fetch_global_Serial1v>
   d5d9c:	6803      	ldr	r3, [r0, #0]
   d5d9e:	691b      	ldr	r3, [r3, #16]
   d5da0:	4798      	blx	r3
   d5da2:	2800      	cmp	r0, #0
   d5da4:	dd01      	ble.n	d5daa <serialEventRun+0x2e>
        serialEvent1();
   d5da6:	f3af 8000 	nop.w
}
   d5daa:	bd08      	pop	{r3, pc}
	...

000d5db4 <_post_loop>:
{
   d5db4:	b508      	push	{r3, lr}
	serialEventRun();
   d5db6:	f7ff ffe1 	bl	d5d7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5dba:	f7ff fbfb 	bl	d55b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dbe:	4b01      	ldr	r3, [pc, #4]	; (d5dc4 <_post_loop+0x10>)
   d5dc0:	6018      	str	r0, [r3, #0]
}
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	2003e7d4 	.word	0x2003e7d4

000d5dc8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5dc8:	4802      	ldr	r0, [pc, #8]	; (d5dd4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5dca:	4a03      	ldr	r2, [pc, #12]	; (d5dd8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5dcc:	4903      	ldr	r1, [pc, #12]	; (d5ddc <_Z33system_initialize_user_backup_ramv+0x14>)
   d5dce:	1a12      	subs	r2, r2, r0
   d5dd0:	f000 bc1c 	b.w	d660c <memcpy>
   d5dd4:	2003f400 	.word	0x2003f400
   d5dd8:	2003f404 	.word	0x2003f404
   d5ddc:	000d7380 	.word	0x000d7380

000d5de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5de0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5de2:	2300      	movs	r3, #0
   d5de4:	9300      	str	r3, [sp, #0]
   d5de6:	461a      	mov	r2, r3
   d5de8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5dec:	f7ff fd44 	bl	d5878 <system_ctrl_set_result>
}
   d5df0:	b003      	add	sp, #12
   d5df2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5df8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5df8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5dfa:	8843      	ldrh	r3, [r0, #2]
   d5dfc:	2b0a      	cmp	r3, #10
   d5dfe:	d008      	beq.n	d5e12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e00:	2b50      	cmp	r3, #80	; 0x50
   d5e02:	d10b      	bne.n	d5e1c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5e04:	4b09      	ldr	r3, [pc, #36]	; (d5e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e06:	681b      	ldr	r3, [r3, #0]
   d5e08:	b14b      	cbz	r3, d5e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5e0a:	b003      	add	sp, #12
   d5e0c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5e10:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5e12:	f7ff ffe5 	bl	d5de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5e16:	b003      	add	sp, #12
   d5e18:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	9300      	str	r3, [sp, #0]
   d5e20:	461a      	mov	r2, r3
   d5e22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e26:	f7ff fd27 	bl	d5878 <system_ctrl_set_result>
}
   d5e2a:	e7f4      	b.n	d5e16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5e2c:	2003e688 	.word	0x2003e688

000d5e30 <module_user_init_hook>:
{
   d5e30:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e32:	4c12      	ldr	r4, [pc, #72]	; (d5e7c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e34:	4812      	ldr	r0, [pc, #72]	; (d5e80 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e36:	4d13      	ldr	r5, [pc, #76]	; (d5e84 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5e38:	2100      	movs	r1, #0
   d5e3a:	f7ff fda7 	bl	d598c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e3e:	6823      	ldr	r3, [r4, #0]
   d5e40:	42ab      	cmp	r3, r5
   d5e42:	4b11      	ldr	r3, [pc, #68]	; (d5e88 <module_user_init_hook+0x58>)
   d5e44:	bf0c      	ite	eq
   d5e46:	2201      	moveq	r2, #1
   d5e48:	2200      	movne	r2, #0
   d5e4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e4c:	d002      	beq.n	d5e54 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5e4e:	f7ff ffbb 	bl	d5dc8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e52:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e54:	f7ff fb9e 	bl	d5594 <HAL_RNG_GetRandomNumber>
   d5e58:	4604      	mov	r4, r0
    srand(seed);
   d5e5a:	f000 fbed 	bl	d6638 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e5e:	4b0b      	ldr	r3, [pc, #44]	; (d5e8c <module_user_init_hook+0x5c>)
   d5e60:	b113      	cbz	r3, d5e68 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5e62:	4620      	mov	r0, r4
   d5e64:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e68:	2100      	movs	r1, #0
   d5e6a:	4808      	ldr	r0, [pc, #32]	; (d5e8c <module_user_init_hook+0x5c>)
   d5e6c:	f7ff fd6e 	bl	d594c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e74:	4806      	ldr	r0, [pc, #24]	; (d5e90 <module_user_init_hook+0x60>)
   d5e76:	2100      	movs	r1, #0
   d5e78:	f7ff bcf4 	b.w	d5864 <system_ctrl_set_app_request_handler>
   d5e7c:	2003f400 	.word	0x2003f400
   d5e80:	000d5d71 	.word	0x000d5d71
   d5e84:	9a271c1e 	.word	0x9a271c1e
   d5e88:	2003e684 	.word	0x2003e684
   d5e8c:	00000000 	.word	0x00000000
   d5e90:	000d5df9 	.word	0x000d5df9

000d5e94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e94:	4770      	bx	lr

000d5e96 <_ZN9IPAddressD0Ev>:
   d5e96:	b510      	push	{r4, lr}
   d5e98:	2118      	movs	r1, #24
   d5e9a:	4604      	mov	r4, r0
   d5e9c:	f000 fba3 	bl	d65e6 <_ZdlPvj>
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	bd10      	pop	{r4, pc}

000d5ea4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ea6:	7d03      	ldrb	r3, [r0, #20]
   d5ea8:	2b06      	cmp	r3, #6
{
   d5eaa:	b08d      	sub	sp, #52	; 0x34
   d5eac:	460e      	mov	r6, r1
   d5eae:	f100 0704 	add.w	r7, r0, #4
   d5eb2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5eb6:	d012      	beq.n	d5ede <_ZNK9IPAddress7printToER5Print+0x3a>
   d5eb8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5ebc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5ec0:	220a      	movs	r2, #10
   d5ec2:	4630      	mov	r0, r6
   d5ec4:	f7ff fed5 	bl	d5c72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ec8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5eca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5ecc:	d019      	beq.n	d5f02 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5ece:	2c00      	cmp	r4, #0
   d5ed0:	d0f4      	beq.n	d5ebc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5ed2:	212e      	movs	r1, #46	; 0x2e
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	f7ff febd 	bl	d5c54 <_ZN5Print5printEc>
   d5eda:	4404      	add	r4, r0
   d5edc:	e7ee      	b.n	d5ebc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ede:	232f      	movs	r3, #47	; 0x2f
   d5ee0:	466a      	mov	r2, sp
   d5ee2:	4639      	mov	r1, r7
   d5ee4:	200a      	movs	r0, #10
		buf[0] = 0;
   d5ee6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5eea:	f7ff fb8b 	bl	d5604 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5eee:	4668      	mov	r0, sp
   d5ef0:	f000 fbc6 	bl	d6680 <strlen>
   d5ef4:	6833      	ldr	r3, [r6, #0]
   d5ef6:	4602      	mov	r2, r0
   d5ef8:	68db      	ldr	r3, [r3, #12]
   d5efa:	4669      	mov	r1, sp
   d5efc:	4630      	mov	r0, r6
   d5efe:	4798      	blx	r3
   d5f00:	4604      	mov	r4, r0
    }
    return n;
}
   d5f02:	4620      	mov	r0, r4
   d5f04:	b00d      	add	sp, #52	; 0x34
   d5f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f08 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5f08:	b510      	push	{r4, lr}
   d5f0a:	4b05      	ldr	r3, [pc, #20]	; (d5f20 <_ZN9IPAddressC1Ev+0x18>)
   d5f0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f0e:	2211      	movs	r2, #17
   d5f10:	f840 3b04 	str.w	r3, [r0], #4
   d5f14:	2100      	movs	r1, #0
   d5f16:	f000 fb87 	bl	d6628 <memset>
}
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	bd10      	pop	{r4, pc}
   d5f1e:	bf00      	nop
   d5f20:	000d7244 	.word	0x000d7244

000d5f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f24:	4603      	mov	r3, r0
   d5f26:	4a07      	ldr	r2, [pc, #28]	; (d5f44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5f2e:	f101 0210 	add.w	r2, r1, #16
   d5f32:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f36:	f843 4b04 	str.w	r4, [r3], #4
   d5f3a:	4291      	cmp	r1, r2
   d5f3c:	d1f9      	bne.n	d5f32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f3e:	780a      	ldrb	r2, [r1, #0]
   d5f40:	701a      	strb	r2, [r3, #0]
}
   d5f42:	bd10      	pop	{r4, pc}
   d5f44:	000d7244 	.word	0x000d7244

000d5f48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5f48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5f5a:	2304      	movs	r3, #4
   d5f5c:	6041      	str	r1, [r0, #4]
   d5f5e:	7503      	strb	r3, [r0, #20]
}
   d5f60:	bd10      	pop	{r4, pc}
	...

000d5f64 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5f64:	b513      	push	{r0, r1, r4, lr}
   d5f66:	4b05      	ldr	r3, [pc, #20]	; (d5f7c <_ZN9IPAddressC1EPKh+0x18>)
   d5f68:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5f6a:	78cb      	ldrb	r3, [r1, #3]
   d5f6c:	9300      	str	r3, [sp, #0]
   d5f6e:	788b      	ldrb	r3, [r1, #2]
   d5f70:	784a      	ldrb	r2, [r1, #1]
   d5f72:	7809      	ldrb	r1, [r1, #0]
   d5f74:	f7ff ffe8 	bl	d5f48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5f78:	b002      	add	sp, #8
   d5f7a:	bd10      	pop	{r4, pc}
   d5f7c:	000d7244 	.word	0x000d7244

000d5f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f80:	7441      	strb	r1, [r0, #17]
}
   d5f82:	4770      	bx	lr

000d5f84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f84:	4770      	bx	lr

000d5f86 <_ZN9USBSerial4readEv>:
{
   d5f86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f88:	2100      	movs	r1, #0
   d5f8a:	7c00      	ldrb	r0, [r0, #16]
   d5f8c:	f7ff fc32 	bl	d57f4 <HAL_USB_USART_Receive_Data>
}
   d5f90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f94:	bd08      	pop	{r3, pc}

000d5f96 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5f96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f98:	2101      	movs	r1, #1
   d5f9a:	7c00      	ldrb	r0, [r0, #16]
   d5f9c:	f7ff fc2a 	bl	d57f4 <HAL_USB_USART_Receive_Data>
}
   d5fa0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fa4:	bd08      	pop	{r3, pc}

000d5fa6 <_ZN9USBSerial17availableForWriteEv>:
{
   d5fa6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5fa8:	7c00      	ldrb	r0, [r0, #16]
   d5faa:	f7ff fc1b 	bl	d57e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fb2:	bd08      	pop	{r3, pc}

000d5fb4 <_ZN9USBSerial9availableEv>:
{
   d5fb4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5fb6:	7c00      	ldrb	r0, [r0, #16]
   d5fb8:	f7ff fc0c 	bl	d57d4 <HAL_USB_USART_Available_Data>
}
   d5fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fc0:	bd08      	pop	{r3, pc}

000d5fc2 <_ZN9USBSerial5writeEh>:
{
   d5fc2:	b513      	push	{r0, r1, r4, lr}
   d5fc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fc6:	7c00      	ldrb	r0, [r0, #16]
{
   d5fc8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fca:	f7ff fc0b 	bl	d57e4 <HAL_USB_USART_Available_Data_For_Write>
   d5fce:	2800      	cmp	r0, #0
   d5fd0:	9901      	ldr	r1, [sp, #4]
   d5fd2:	dc01      	bgt.n	d5fd8 <_ZN9USBSerial5writeEh+0x16>
   d5fd4:	7c60      	ldrb	r0, [r4, #17]
   d5fd6:	b120      	cbz	r0, d5fe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5fd8:	7c20      	ldrb	r0, [r4, #16]
   d5fda:	f7ff fc13 	bl	d5804 <HAL_USB_USART_Send_Data>
   d5fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5fe2:	b002      	add	sp, #8
   d5fe4:	bd10      	pop	{r4, pc}

000d5fe6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5fe6:	7c00      	ldrb	r0, [r0, #16]
   d5fe8:	f7ff bc14 	b.w	d5814 <HAL_USB_USART_Flush_Data>

000d5fec <_ZN9USBSerialD0Ev>:
   d5fec:	b510      	push	{r4, lr}
   d5fee:	2114      	movs	r1, #20
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	f000 faf8 	bl	d65e6 <_ZdlPvj>
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	bd10      	pop	{r4, pc}
	...

000d5ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ffc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6002:	4604      	mov	r4, r0
   d6004:	4608      	mov	r0, r1
   d6006:	2100      	movs	r1, #0
   d6008:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d600c:	4b04      	ldr	r3, [pc, #16]	; (d6020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d600e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6010:	2301      	movs	r3, #1
  _serial = serial;
   d6012:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6014:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6016:	4611      	mov	r1, r2
   d6018:	f7ff fbd4 	bl	d57c4 <HAL_USB_USART_Init>
}
   d601c:	4620      	mov	r0, r4
   d601e:	bd10      	pop	{r4, pc}
   d6020:	000d7258 	.word	0x000d7258

000d6024 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6024:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6026:	2214      	movs	r2, #20
{
   d6028:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d602a:	2100      	movs	r1, #0
   d602c:	f000 fafc 	bl	d6628 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6030:	4620      	mov	r0, r4
   d6032:	bd10      	pop	{r4, pc}

000d6034 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6034:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6036:	4c10      	ldr	r4, [pc, #64]	; (d6078 <_Z16_fetch_usbserialv+0x44>)
{
   d6038:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d603a:	a803      	add	r0, sp, #12
   d603c:	f7ff fff2 	bl	d6024 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6040:	7821      	ldrb	r1, [r4, #0]
   d6042:	f3bf 8f5b 	dmb	ish
   d6046:	f011 0101 	ands.w	r1, r1, #1
   d604a:	d111      	bne.n	d6070 <_Z16_fetch_usbserialv+0x3c>
   d604c:	4620      	mov	r0, r4
   d604e:	9101      	str	r1, [sp, #4]
   d6050:	f7fe f82e 	bl	d40b0 <__cxa_guard_acquire>
   d6054:	9901      	ldr	r1, [sp, #4]
   d6056:	b158      	cbz	r0, d6070 <_Z16_fetch_usbserialv+0x3c>
   d6058:	aa03      	add	r2, sp, #12
   d605a:	4808      	ldr	r0, [pc, #32]	; (d607c <_Z16_fetch_usbserialv+0x48>)
   d605c:	f7ff ffce 	bl	d5ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6060:	4620      	mov	r0, r4
   d6062:	f7fe f82a 	bl	d40ba <__cxa_guard_release>
   d6066:	4a06      	ldr	r2, [pc, #24]	; (d6080 <_Z16_fetch_usbserialv+0x4c>)
   d6068:	4906      	ldr	r1, [pc, #24]	; (d6084 <_Z16_fetch_usbserialv+0x50>)
   d606a:	4804      	ldr	r0, [pc, #16]	; (d607c <_Z16_fetch_usbserialv+0x48>)
   d606c:	f000 fab6 	bl	d65dc <__aeabi_atexit>
	return _usbserial;
}
   d6070:	4802      	ldr	r0, [pc, #8]	; (d607c <_Z16_fetch_usbserialv+0x48>)
   d6072:	b008      	add	sp, #32
   d6074:	bd10      	pop	{r4, pc}
   d6076:	bf00      	nop
   d6078:	2003e68c 	.word	0x2003e68c
   d607c:	2003e690 	.word	0x2003e690
   d6080:	2003e5b8 	.word	0x2003e5b8
   d6084:	000d5f85 	.word	0x000d5f85

000d6088 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6088:	4700      	bx	r0
	...

000d608c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d608c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6090:	2400      	movs	r4, #0
{
   d6092:	461d      	mov	r5, r3
   d6094:	460f      	mov	r7, r1
   d6096:	4690      	mov	r8, r2
   d6098:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d609a:	f7ff fa73 	bl	d5584 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d609e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d60a0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d60a4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d60a8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d60ac:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d60b0:	bfa2      	ittt	ge
   d60b2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d60b6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d60ba:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d60bc:	4907      	ldr	r1, [pc, #28]	; (d60dc <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d60be:	9400      	str	r4, [sp, #0]
   d60c0:	4643      	mov	r3, r8
   d60c2:	463a      	mov	r2, r7
   d60c4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d60c6:	bfa8      	it	ge
   d60c8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d60cc:	f7ff fa52 	bl	d5574 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d60d0:	fab0 f080 	clz	r0, r0
   d60d4:	0940      	lsrs	r0, r0, #5
   d60d6:	b004      	add	sp, #16
   d60d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60dc:	000d6089 	.word	0x000d6089

000d60e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d60e0:	4770      	bx	lr

000d60e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60e2:	7441      	strb	r1, [r0, #17]
}
   d60e4:	4770      	bx	lr

000d60e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d60e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7ff facb 	bl	d5684 <hal_usart_available_data_for_write>
}
   d60ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60f2:	bd08      	pop	{r3, pc}

000d60f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d60f6:	7c00      	ldrb	r0, [r0, #16]
   d60f8:	f7ff fa9c 	bl	d5634 <hal_usart_available>
}
   d60fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6100:	bd08      	pop	{r3, pc}

000d6102 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6102:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6104:	7c00      	ldrb	r0, [r0, #16]
   d6106:	f7ff faa5 	bl	d5654 <hal_usart_peek>
}
   d610a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d610e:	bd08      	pop	{r3, pc}

000d6110 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6110:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6112:	7c00      	ldrb	r0, [r0, #16]
   d6114:	f7ff fa96 	bl	d5644 <hal_usart_read>
}
   d6118:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d611c:	bd08      	pop	{r3, pc}

000d611e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d611e:	7c00      	ldrb	r0, [r0, #16]
   d6120:	f7ff baa0 	b.w	d5664 <hal_usart_flush>

000d6124 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6124:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6126:	7c45      	ldrb	r5, [r0, #17]
{
   d6128:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d612a:	b12d      	cbz	r5, d6138 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d612c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d612e:	b003      	add	sp, #12
   d6130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6134:	f7ff ba76 	b.w	d5624 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6138:	7c00      	ldrb	r0, [r0, #16]
   d613a:	9101      	str	r1, [sp, #4]
   d613c:	f7ff faa2 	bl	d5684 <hal_usart_available_data_for_write>
   d6140:	2800      	cmp	r0, #0
   d6142:	9901      	ldr	r1, [sp, #4]
   d6144:	dcf2      	bgt.n	d612c <_ZN11USARTSerial5writeEh+0x8>
}
   d6146:	4628      	mov	r0, r5
   d6148:	b003      	add	sp, #12
   d614a:	bd30      	pop	{r4, r5, pc}

000d614c <_ZN11USARTSerialD0Ev>:
   d614c:	b510      	push	{r4, lr}
   d614e:	2114      	movs	r1, #20
   d6150:	4604      	mov	r4, r0
   d6152:	f000 fa48 	bl	d65e6 <_ZdlPvj>
   d6156:	4620      	mov	r0, r4
   d6158:	bd10      	pop	{r4, pc}
	...

000d615c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d615c:	b510      	push	{r4, lr}
   d615e:	f04f 0c00 	mov.w	ip, #0
   d6162:	4604      	mov	r4, r0
   d6164:	4608      	mov	r0, r1
   d6166:	4611      	mov	r1, r2
   d6168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d616c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6170:	4a04      	ldr	r2, [pc, #16]	; (d6184 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6172:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6174:	2201      	movs	r2, #1
  _serial = serial;
   d6176:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6178:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d617a:	461a      	mov	r2, r3
   d617c:	f7ff fa4a 	bl	d5614 <hal_usart_init>
}
   d6180:	4620      	mov	r0, r4
   d6182:	bd10      	pop	{r4, pc}
   d6184:	000d7288 	.word	0x000d7288

000d6188 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6188:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d618a:	4c0e      	ldr	r4, [pc, #56]	; (d61c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d618c:	7821      	ldrb	r1, [r4, #0]
   d618e:	f3bf 8f5b 	dmb	ish
   d6192:	f011 0101 	ands.w	r1, r1, #1
   d6196:	d112      	bne.n	d61be <_Z22__fetch_global_Serial1v+0x36>
   d6198:	4620      	mov	r0, r4
   d619a:	9101      	str	r1, [sp, #4]
   d619c:	f7fd ff88 	bl	d40b0 <__cxa_guard_acquire>
   d61a0:	9901      	ldr	r1, [sp, #4]
   d61a2:	b160      	cbz	r0, d61be <_Z22__fetch_global_Serial1v+0x36>
   d61a4:	4a08      	ldr	r2, [pc, #32]	; (d61c8 <_Z22__fetch_global_Serial1v+0x40>)
   d61a6:	4b09      	ldr	r3, [pc, #36]	; (d61cc <_Z22__fetch_global_Serial1v+0x44>)
   d61a8:	4809      	ldr	r0, [pc, #36]	; (d61d0 <_Z22__fetch_global_Serial1v+0x48>)
   d61aa:	f7ff ffd7 	bl	d615c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d61ae:	4620      	mov	r0, r4
   d61b0:	f7fd ff83 	bl	d40ba <__cxa_guard_release>
   d61b4:	4a07      	ldr	r2, [pc, #28]	; (d61d4 <_Z22__fetch_global_Serial1v+0x4c>)
   d61b6:	4908      	ldr	r1, [pc, #32]	; (d61d8 <_Z22__fetch_global_Serial1v+0x50>)
   d61b8:	4805      	ldr	r0, [pc, #20]	; (d61d0 <_Z22__fetch_global_Serial1v+0x48>)
   d61ba:	f000 fa0f 	bl	d65dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d61be:	4804      	ldr	r0, [pc, #16]	; (d61d0 <_Z22__fetch_global_Serial1v+0x48>)
   d61c0:	b002      	add	sp, #8
   d61c2:	bd10      	pop	{r4, pc}
   d61c4:	2003e6a4 	.word	0x2003e6a4
   d61c8:	2003e6a8 	.word	0x2003e6a8
   d61cc:	2003e72c 	.word	0x2003e72c
   d61d0:	2003e7b0 	.word	0x2003e7b0
   d61d4:	2003e5b8 	.word	0x2003e5b8
   d61d8:	000d60e1 	.word	0x000d60e1

000d61dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d61dc:	4770      	bx	lr

000d61de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d61de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61e0:	4606      	mov	r6, r0
   d61e2:	4615      	mov	r5, r2
   d61e4:	460c      	mov	r4, r1
   d61e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61e8:	42bc      	cmp	r4, r7
   d61ea:	d006      	beq.n	d61fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d61ec:	6833      	ldr	r3, [r6, #0]
   d61ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61f2:	689b      	ldr	r3, [r3, #8]
   d61f4:	4630      	mov	r0, r6
   d61f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d61f8:	e7f6      	b.n	d61e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d61fa:	4628      	mov	r0, r5
   d61fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d61fe:	7c00      	ldrb	r0, [r0, #16]
   d6200:	2200      	movs	r2, #0
   d6202:	f7ff ba67 	b.w	d56d4 <hal_i2c_write>

000d6206 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6206:	7c00      	ldrb	r0, [r0, #16]
   d6208:	2100      	movs	r1, #0
   d620a:	f7ff ba6b 	b.w	d56e4 <hal_i2c_available>

000d620e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d620e:	7c00      	ldrb	r0, [r0, #16]
   d6210:	2100      	movs	r1, #0
   d6212:	f7ff ba6f 	b.w	d56f4 <hal_i2c_read>

000d6216 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6216:	7c00      	ldrb	r0, [r0, #16]
   d6218:	2100      	movs	r1, #0
   d621a:	f7ff ba73 	b.w	d5704 <hal_i2c_peek>

000d621e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d621e:	7c00      	ldrb	r0, [r0, #16]
   d6220:	2100      	movs	r1, #0
   d6222:	f7ff ba77 	b.w	d5714 <hal_i2c_flush>

000d6226 <_ZN7TwoWireD0Ev>:
   d6226:	b510      	push	{r4, lr}
   d6228:	2114      	movs	r1, #20
   d622a:	4604      	mov	r4, r0
   d622c:	f000 f9db 	bl	d65e6 <_ZdlPvj>
   d6230:	4620      	mov	r0, r4
   d6232:	bd10      	pop	{r4, pc}

000d6234 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6234:	b510      	push	{r4, lr}
   d6236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d623a:	4604      	mov	r4, r0
   d623c:	4608      	mov	r0, r1
   d623e:	2100      	movs	r1, #0
   d6240:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6244:	4b03      	ldr	r3, [pc, #12]	; (d6254 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6246:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6248:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d624a:	4611      	mov	r1, r2
   d624c:	f7ff fa72 	bl	d5734 <hal_i2c_init>
}
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}
   d6254:	000d72b8 	.word	0x000d72b8

000d6258 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6258:	7c00      	ldrb	r0, [r0, #16]
   d625a:	2200      	movs	r2, #0
   d625c:	f7ff ba1a 	b.w	d5694 <hal_i2c_set_speed>

000d6260 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6260:	2300      	movs	r3, #0
   d6262:	7c00      	ldrb	r0, [r0, #16]
   d6264:	461a      	mov	r2, r3
   d6266:	4619      	mov	r1, r3
   d6268:	f7ff ba1c 	b.w	d56a4 <hal_i2c_begin>

000d626c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d626c:	7c00      	ldrb	r0, [r0, #16]
   d626e:	2200      	movs	r2, #0
   d6270:	f7ff ba20 	b.w	d56b4 <hal_i2c_begin_transmission>

000d6274 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6274:	b2c9      	uxtb	r1, r1
   d6276:	f7ff bff9 	b.w	d626c <_ZN7TwoWire17beginTransmissionEh>

000d627a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d627a:	7c00      	ldrb	r0, [r0, #16]
   d627c:	2200      	movs	r2, #0
   d627e:	f7ff ba21 	b.w	d56c4 <hal_i2c_end_transmission>

000d6282 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6282:	2101      	movs	r1, #1
   d6284:	f7ff bff9 	b.w	d627a <_ZN7TwoWire15endTransmissionEh>

000d6288 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6288:	2200      	movs	r2, #0
   d628a:	6840      	ldr	r0, [r0, #4]
   d628c:	4611      	mov	r1, r2
   d628e:	f7ff bb15 	b.w	d58bc <network_ready>

000d6292 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6292:	2200      	movs	r2, #0
   d6294:	6840      	ldr	r0, [r0, #4]
   d6296:	4611      	mov	r1, r2
   d6298:	f7ff bb30 	b.w	d58fc <network_listening>

000d629c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d629c:	2200      	movs	r2, #0
   d629e:	6840      	ldr	r0, [r0, #4]
   d62a0:	4611      	mov	r1, r2
   d62a2:	f7ff bb3b 	b.w	d591c <network_get_listen_timeout>

000d62a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d62a6:	6840      	ldr	r0, [r0, #4]
   d62a8:	2200      	movs	r2, #0
   d62aa:	f7ff bb2f 	b.w	d590c <network_set_listen_timeout>

000d62ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d62ae:	6840      	ldr	r0, [r0, #4]
   d62b0:	2200      	movs	r2, #0
   d62b2:	f081 0101 	eor.w	r1, r1, #1
   d62b6:	f7ff bb19 	b.w	d58ec <network_listen>

000d62ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d62ba:	2300      	movs	r3, #0
   d62bc:	6840      	ldr	r0, [r0, #4]
   d62be:	461a      	mov	r2, r3
   d62c0:	4619      	mov	r1, r3
   d62c2:	f7ff bb0b 	b.w	d58dc <network_off>

000d62c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d62c6:	2200      	movs	r2, #0
   d62c8:	6840      	ldr	r0, [r0, #4]
   d62ca:	4611      	mov	r1, r2
   d62cc:	f7ff bae6 	b.w	d589c <network_connecting>

000d62d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62d0:	6840      	ldr	r0, [r0, #4]
   d62d2:	2200      	movs	r2, #0
   d62d4:	2102      	movs	r1, #2
   d62d6:	f7ff bae9 	b.w	d58ac <network_disconnect>

000d62da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d62da:	2300      	movs	r3, #0
   d62dc:	6840      	ldr	r0, [r0, #4]
   d62de:	461a      	mov	r2, r3
   d62e0:	f7ff bad4 	b.w	d588c <network_connect>

000d62e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d62e4:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d62e6:	2204      	movs	r2, #4
   d62e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d62ea:	4a02      	ldr	r2, [pc, #8]	; (d62f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d62ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d62ee:	4770      	bx	lr
   d62f0:	2003e7c4 	.word	0x2003e7c4
   d62f4:	000d72e0 	.word	0x000d72e0

000d62f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d62f8:	2300      	movs	r3, #0
   d62fa:	6840      	ldr	r0, [r0, #4]
   d62fc:	461a      	mov	r2, r3
   d62fe:	f7ff bac5 	b.w	d588c <network_connect>

000d6302 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6302:	6840      	ldr	r0, [r0, #4]
   d6304:	2200      	movs	r2, #0
   d6306:	2102      	movs	r1, #2
   d6308:	f7ff bad0 	b.w	d58ac <network_disconnect>

000d630c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d630c:	2200      	movs	r2, #0
   d630e:	6840      	ldr	r0, [r0, #4]
   d6310:	4611      	mov	r1, r2
   d6312:	f7ff bac3 	b.w	d589c <network_connecting>

000d6316 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6316:	2200      	movs	r2, #0
   d6318:	6840      	ldr	r0, [r0, #4]
   d631a:	4611      	mov	r1, r2
   d631c:	f7ff bace 	b.w	d58bc <network_ready>

000d6320 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6320:	2300      	movs	r3, #0
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	461a      	mov	r2, r3
   d6326:	4619      	mov	r1, r3
   d6328:	f7ff bad0 	b.w	d58cc <network_on>

000d632c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d632c:	2300      	movs	r3, #0
   d632e:	6840      	ldr	r0, [r0, #4]
   d6330:	461a      	mov	r2, r3
   d6332:	4619      	mov	r1, r3
   d6334:	f7ff bad2 	b.w	d58dc <network_off>

000d6338 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6338:	6840      	ldr	r0, [r0, #4]
   d633a:	2100      	movs	r1, #0
   d633c:	f7ff baf6 	b.w	d592c <network_is_on>

000d6340 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	2100      	movs	r1, #0
   d6344:	f7ff bafa 	b.w	d593c <network_is_off>

000d6348 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6348:	6840      	ldr	r0, [r0, #4]
   d634a:	2200      	movs	r2, #0
   d634c:	f081 0101 	eor.w	r1, r1, #1
   d6350:	f7ff bacc 	b.w	d58ec <network_listen>

000d6354 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6354:	6840      	ldr	r0, [r0, #4]
   d6356:	2200      	movs	r2, #0
   d6358:	f7ff bad8 	b.w	d590c <network_set_listen_timeout>

000d635c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d635c:	2200      	movs	r2, #0
   d635e:	6840      	ldr	r0, [r0, #4]
   d6360:	4611      	mov	r1, r2
   d6362:	f7ff badb 	b.w	d591c <network_get_listen_timeout>

000d6366 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6366:	2200      	movs	r2, #0
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	4611      	mov	r1, r2
   d636c:	f7ff bac6 	b.w	d58fc <network_listening>

000d6370 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6374:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6376:	b095      	sub	sp, #84	; 0x54
   d6378:	4616      	mov	r6, r2
   d637a:	460d      	mov	r5, r1
   d637c:	4607      	mov	r7, r0
    IPAddress addr;
   d637e:	f7ff fdc3 	bl	d5f08 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6382:	4621      	mov	r1, r4
   d6384:	2218      	movs	r2, #24
   d6386:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6388:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d638a:	f000 f94d 	bl	d6628 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d638e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6390:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6394:	4621      	mov	r1, r4
   d6396:	466b      	mov	r3, sp
   d6398:	aa0c      	add	r2, sp, #48	; 0x30
   d639a:	4630      	mov	r0, r6
   d639c:	f7ff f8c2 	bl	d5524 <netdb_getaddrinfo>
    if (!r) {
   d63a0:	4604      	mov	r4, r0
   d63a2:	2800      	cmp	r0, #0
   d63a4:	d14c      	bne.n	d6440 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63a6:	4602      	mov	r2, r0
   d63a8:	2101      	movs	r1, #1
   d63aa:	6868      	ldr	r0, [r5, #4]
   d63ac:	f7ff fa86 	bl	d58bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63b4:	4622      	mov	r2, r4
   d63b6:	6868      	ldr	r0, [r5, #4]
   d63b8:	f7ff fa80 	bl	d58bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63be:	4681      	mov	r9, r0
        bool ok = false;
   d63c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63c2:	2e00      	cmp	r6, #0
   d63c4:	d03c      	beq.n	d6440 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d63c6:	2900      	cmp	r1, #0
   d63c8:	d13a      	bne.n	d6440 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d63ca:	6873      	ldr	r3, [r6, #4]
   d63cc:	2b02      	cmp	r3, #2
   d63ce:	d003      	beq.n	d63d8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d63d0:	2b0a      	cmp	r3, #10
   d63d2:	d011      	beq.n	d63f8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63d4:	69f6      	ldr	r6, [r6, #28]
   d63d6:	e7f4      	b.n	d63c2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d63d8:	f1b8 0f00 	cmp.w	r8, #0
   d63dc:	d00a      	beq.n	d63f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d63de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d63e0:	a806      	add	r0, sp, #24
   d63e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d63e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d63e6:	f7ff fdbd 	bl	d5f64 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d63ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d63ec:	1d3c      	adds	r4, r7, #4
   d63ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63f0:	682b      	ldr	r3, [r5, #0]
   d63f2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d63f4:	4641      	mov	r1, r8
   d63f6:	e7ed      	b.n	d63d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d63f8:	f1b9 0f00 	cmp.w	r9, #0
   d63fc:	d101      	bne.n	d6402 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d63fe:	4649      	mov	r1, r9
   d6400:	e7e8      	b.n	d63d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6402:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6404:	2210      	movs	r2, #16
   d6406:	a801      	add	r0, sp, #4
   d6408:	f000 f90e 	bl	d6628 <memset>
                    a.v = 6;
   d640c:	2306      	movs	r3, #6
   d640e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6412:	ad01      	add	r5, sp, #4
   d6414:	f104 0308 	add.w	r3, r4, #8
   d6418:	3418      	adds	r4, #24
   d641a:	6818      	ldr	r0, [r3, #0]
   d641c:	6859      	ldr	r1, [r3, #4]
   d641e:	462a      	mov	r2, r5
   d6420:	c203      	stmia	r2!, {r0, r1}
   d6422:	3308      	adds	r3, #8
   d6424:	42a3      	cmp	r3, r4
   d6426:	4615      	mov	r5, r2
   d6428:	d1f7      	bne.n	d641a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d642a:	a901      	add	r1, sp, #4
   d642c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d642e:	ad07      	add	r5, sp, #28
   d6430:	f7ff fd78 	bl	d5f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6436:	1d3c      	adds	r4, r7, #4
   d6438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d643a:	682b      	ldr	r3, [r5, #0]
   d643c:	7023      	strb	r3, [r4, #0]
   d643e:	e7de      	b.n	d63fe <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6440:	9800      	ldr	r0, [sp, #0]
   d6442:	f7ff f867 	bl	d5514 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6446:	4638      	mov	r0, r7
   d6448:	b015      	add	sp, #84	; 0x54
   d644a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6450 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6450:	4b02      	ldr	r3, [pc, #8]	; (d645c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6452:	4a03      	ldr	r2, [pc, #12]	; (d6460 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6454:	601a      	str	r2, [r3, #0]
   d6456:	2200      	movs	r2, #0
   d6458:	605a      	str	r2, [r3, #4]

} // spark
   d645a:	4770      	bx	lr
   d645c:	2003e7cc 	.word	0x2003e7cc
   d6460:	000d731c 	.word	0x000d731c

000d6464 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6464:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6466:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6468:	d902      	bls.n	d6470 <pinAvailable+0xc>
    return false;
   d646a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d646c:	b002      	add	sp, #8
   d646e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6470:	f1a0 030b 	sub.w	r3, r0, #11
   d6474:	2b02      	cmp	r3, #2
   d6476:	d81a      	bhi.n	d64ae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6478:	4c17      	ldr	r4, [pc, #92]	; (d64d8 <pinAvailable+0x74>)
   d647a:	7821      	ldrb	r1, [r4, #0]
   d647c:	f3bf 8f5b 	dmb	ish
   d6480:	f011 0101 	ands.w	r1, r1, #1
   d6484:	d10b      	bne.n	d649e <pinAvailable+0x3a>
   d6486:	4620      	mov	r0, r4
   d6488:	9101      	str	r1, [sp, #4]
   d648a:	f7fd fe11 	bl	d40b0 <__cxa_guard_acquire>
   d648e:	9901      	ldr	r1, [sp, #4]
   d6490:	b128      	cbz	r0, d649e <pinAvailable+0x3a>
   d6492:	4812      	ldr	r0, [pc, #72]	; (d64dc <pinAvailable+0x78>)
   d6494:	f7ff fac6 	bl	d5a24 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6498:	4620      	mov	r0, r4
   d649a:	f7fd fe0e 	bl	d40ba <__cxa_guard_release>
   d649e:	4b0f      	ldr	r3, [pc, #60]	; (d64dc <pinAvailable+0x78>)
   d64a0:	7818      	ldrb	r0, [r3, #0]
   d64a2:	f7ff f967 	bl	d5774 <hal_spi_is_enabled>
   d64a6:	2800      	cmp	r0, #0
   d64a8:	d1df      	bne.n	d646a <pinAvailable+0x6>
  return true; // 'pin' is available
   d64aa:	2001      	movs	r0, #1
   d64ac:	e7de      	b.n	d646c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d64ae:	2801      	cmp	r0, #1
   d64b0:	d809      	bhi.n	d64c6 <pinAvailable+0x62>
   d64b2:	f000 f86b 	bl	d658c <_Z19__fetch_global_Wirev>
   d64b6:	2100      	movs	r1, #0
   d64b8:	7c00      	ldrb	r0, [r0, #16]
   d64ba:	f7ff f933 	bl	d5724 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d64be:	f080 0001 	eor.w	r0, r0, #1
   d64c2:	b2c0      	uxtb	r0, r0
   d64c4:	e7d2      	b.n	d646c <pinAvailable+0x8>
   d64c6:	3809      	subs	r0, #9
   d64c8:	2801      	cmp	r0, #1
   d64ca:	d8ee      	bhi.n	d64aa <pinAvailable+0x46>
   d64cc:	f7ff fe5c 	bl	d6188 <_Z22__fetch_global_Serial1v>
   d64d0:	7c00      	ldrb	r0, [r0, #16]
   d64d2:	f7ff f8cf 	bl	d5674 <hal_usart_is_enabled>
   d64d6:	e7f2      	b.n	d64be <pinAvailable+0x5a>
   d64d8:	2003e644 	.word	0x2003e644
   d64dc:	2003e648 	.word	0x2003e648

000d64e0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d64e0:	2823      	cmp	r0, #35	; 0x23
{
   d64e2:	b538      	push	{r3, r4, r5, lr}
   d64e4:	4604      	mov	r4, r0
   d64e6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d64e8:	d80a      	bhi.n	d6500 <pinMode+0x20>
   d64ea:	29ff      	cmp	r1, #255	; 0xff
   d64ec:	d008      	beq.n	d6500 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d64ee:	f7ff ffb9 	bl	d6464 <pinAvailable>
   d64f2:	b128      	cbz	r0, d6500 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d64f4:	4629      	mov	r1, r5
   d64f6:	4620      	mov	r0, r4
}
   d64f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d64fc:	f7ff b81a 	b.w	d5534 <HAL_Pin_Mode>
}
   d6500:	bd38      	pop	{r3, r4, r5, pc}

000d6502 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6502:	b538      	push	{r3, r4, r5, lr}
   d6504:	4604      	mov	r4, r0
   d6506:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6508:	f7ff f81c 	bl	d5544 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d650c:	28ff      	cmp	r0, #255	; 0xff
   d650e:	d010      	beq.n	d6532 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6510:	2806      	cmp	r0, #6
   d6512:	d804      	bhi.n	d651e <digitalWrite+0x1c>
   d6514:	234d      	movs	r3, #77	; 0x4d
   d6516:	fa23 f000 	lsr.w	r0, r3, r0
   d651a:	07c3      	lsls	r3, r0, #31
   d651c:	d409      	bmi.n	d6532 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d651e:	4620      	mov	r0, r4
   d6520:	f7ff ffa0 	bl	d6464 <pinAvailable>
   d6524:	b128      	cbz	r0, d6532 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6526:	4629      	mov	r1, r5
   d6528:	4620      	mov	r0, r4
}
   d652a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d652e:	f7ff b811 	b.w	d5554 <HAL_GPIO_Write>
}
   d6532:	bd38      	pop	{r3, r4, r5, pc}

000d6534 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6534:	b510      	push	{r4, lr}
   d6536:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6538:	f7ff f804 	bl	d5544 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d653c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d653e:	b2db      	uxtb	r3, r3
   d6540:	2b01      	cmp	r3, #1
   d6542:	d908      	bls.n	d6556 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6544:	4620      	mov	r0, r4
   d6546:	f7ff ff8d 	bl	d6464 <pinAvailable>
   d654a:	b120      	cbz	r0, d6556 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d654c:	4620      	mov	r0, r4
}
   d654e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6552:	f7ff b807 	b.w	d5564 <HAL_GPIO_Read>
}
   d6556:	2000      	movs	r0, #0
   d6558:	bd10      	pop	{r4, pc}
	...

000d655c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d655c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d655e:	2300      	movs	r3, #0
   d6560:	2520      	movs	r5, #32
   d6562:	8043      	strh	r3, [r0, #2]
   d6564:	2314      	movs	r3, #20
{
   d6566:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6568:	8003      	strh	r3, [r0, #0]
   d656a:	6085      	str	r5, [r0, #8]
   d656c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d656e:	4906      	ldr	r1, [pc, #24]	; (d6588 <_Z17acquireWireBufferv+0x2c>)
   d6570:	4628      	mov	r0, r5
   d6572:	f000 f83a 	bl	d65ea <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6576:	4904      	ldr	r1, [pc, #16]	; (d6588 <_Z17acquireWireBufferv+0x2c>)
	};
   d6578:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d657a:	4628      	mov	r0, r5
   d657c:	f000 f835 	bl	d65ea <_ZnajRKSt9nothrow_t>
	};
   d6580:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6582:	4620      	mov	r0, r4
   d6584:	bd38      	pop	{r3, r4, r5, pc}
   d6586:	bf00      	nop
   d6588:	000d7350 	.word	0x000d7350

000d658c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d658c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d658e:	4d0f      	ldr	r5, [pc, #60]	; (d65cc <_Z19__fetch_global_Wirev+0x40>)
   d6590:	7829      	ldrb	r1, [r5, #0]
   d6592:	f3bf 8f5b 	dmb	ish
   d6596:	f011 0401 	ands.w	r4, r1, #1
{
   d659a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d659c:	d113      	bne.n	d65c6 <_Z19__fetch_global_Wirev+0x3a>
   d659e:	4628      	mov	r0, r5
   d65a0:	f7fd fd86 	bl	d40b0 <__cxa_guard_acquire>
   d65a4:	b178      	cbz	r0, d65c6 <_Z19__fetch_global_Wirev+0x3a>
   d65a6:	a801      	add	r0, sp, #4
   d65a8:	f7ff ffd8 	bl	d655c <_Z17acquireWireBufferv>
   d65ac:	aa01      	add	r2, sp, #4
   d65ae:	4621      	mov	r1, r4
   d65b0:	4807      	ldr	r0, [pc, #28]	; (d65d0 <_Z19__fetch_global_Wirev+0x44>)
   d65b2:	f7ff fe3f 	bl	d6234 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d65b6:	4628      	mov	r0, r5
   d65b8:	f7fd fd7f 	bl	d40ba <__cxa_guard_release>
   d65bc:	4a05      	ldr	r2, [pc, #20]	; (d65d4 <_Z19__fetch_global_Wirev+0x48>)
   d65be:	4906      	ldr	r1, [pc, #24]	; (d65d8 <_Z19__fetch_global_Wirev+0x4c>)
   d65c0:	4803      	ldr	r0, [pc, #12]	; (d65d0 <_Z19__fetch_global_Wirev+0x44>)
   d65c2:	f000 f80b 	bl	d65dc <__aeabi_atexit>
	return wire;
}
   d65c6:	4802      	ldr	r0, [pc, #8]	; (d65d0 <_Z19__fetch_global_Wirev+0x44>)
   d65c8:	b007      	add	sp, #28
   d65ca:	bd30      	pop	{r4, r5, pc}
   d65cc:	2003e7d8 	.word	0x2003e7d8
   d65d0:	2003e7dc 	.word	0x2003e7dc
   d65d4:	2003e5b8 	.word	0x2003e5b8
   d65d8:	000d61dd 	.word	0x000d61dd

000d65dc <__aeabi_atexit>:
   d65dc:	460b      	mov	r3, r1
   d65de:	4601      	mov	r1, r0
   d65e0:	4618      	mov	r0, r3
   d65e2:	f000 b805 	b.w	d65f0 <__cxa_atexit>

000d65e6 <_ZdlPvj>:
   d65e6:	f7fd bd56 	b.w	d4096 <_ZdlPv>

000d65ea <_ZnajRKSt9nothrow_t>:
   d65ea:	f7fd bd52 	b.w	d4092 <_Znaj>
	...

000d65f0 <__cxa_atexit>:
   d65f0:	b510      	push	{r4, lr}
   d65f2:	4c05      	ldr	r4, [pc, #20]	; (d6608 <__cxa_atexit+0x18>)
   d65f4:	4613      	mov	r3, r2
   d65f6:	b12c      	cbz	r4, d6604 <__cxa_atexit+0x14>
   d65f8:	460a      	mov	r2, r1
   d65fa:	4601      	mov	r1, r0
   d65fc:	2002      	movs	r0, #2
   d65fe:	f3af 8000 	nop.w
   d6602:	bd10      	pop	{r4, pc}
   d6604:	4620      	mov	r0, r4
   d6606:	e7fc      	b.n	d6602 <__cxa_atexit+0x12>
   d6608:	00000000 	.word	0x00000000

000d660c <memcpy>:
   d660c:	440a      	add	r2, r1
   d660e:	4291      	cmp	r1, r2
   d6610:	f100 33ff 	add.w	r3, r0, #4294967295
   d6614:	d100      	bne.n	d6618 <memcpy+0xc>
   d6616:	4770      	bx	lr
   d6618:	b510      	push	{r4, lr}
   d661a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d661e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6622:	4291      	cmp	r1, r2
   d6624:	d1f9      	bne.n	d661a <memcpy+0xe>
   d6626:	bd10      	pop	{r4, pc}

000d6628 <memset>:
   d6628:	4402      	add	r2, r0
   d662a:	4603      	mov	r3, r0
   d662c:	4293      	cmp	r3, r2
   d662e:	d100      	bne.n	d6632 <memset+0xa>
   d6630:	4770      	bx	lr
   d6632:	f803 1b01 	strb.w	r1, [r3], #1
   d6636:	e7f9      	b.n	d662c <memset+0x4>

000d6638 <srand>:
   d6638:	b538      	push	{r3, r4, r5, lr}
   d663a:	4b0d      	ldr	r3, [pc, #52]	; (d6670 <srand+0x38>)
   d663c:	681d      	ldr	r5, [r3, #0]
   d663e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6640:	4604      	mov	r4, r0
   d6642:	b97b      	cbnz	r3, d6664 <srand+0x2c>
   d6644:	2018      	movs	r0, #24
   d6646:	f7ff f989 	bl	d595c <malloc>
   d664a:	4a0a      	ldr	r2, [pc, #40]	; (d6674 <srand+0x3c>)
   d664c:	4b0a      	ldr	r3, [pc, #40]	; (d6678 <srand+0x40>)
   d664e:	63a8      	str	r0, [r5, #56]	; 0x38
   d6650:	e9c0 2300 	strd	r2, r3, [r0]
   d6654:	4b09      	ldr	r3, [pc, #36]	; (d667c <srand+0x44>)
   d6656:	6083      	str	r3, [r0, #8]
   d6658:	230b      	movs	r3, #11
   d665a:	8183      	strh	r3, [r0, #12]
   d665c:	2201      	movs	r2, #1
   d665e:	2300      	movs	r3, #0
   d6660:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6664:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6666:	2200      	movs	r2, #0
   d6668:	611c      	str	r4, [r3, #16]
   d666a:	615a      	str	r2, [r3, #20]
   d666c:	bd38      	pop	{r3, r4, r5, pc}
   d666e:	bf00      	nop
   d6670:	2003e554 	.word	0x2003e554
   d6674:	abcd330e 	.word	0xabcd330e
   d6678:	e66d1234 	.word	0xe66d1234
   d667c:	0005deec 	.word	0x0005deec

000d6680 <strlen>:
   d6680:	4603      	mov	r3, r0
   d6682:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6686:	2a00      	cmp	r2, #0
   d6688:	d1fb      	bne.n	d6682 <strlen+0x2>
   d668a:	1a18      	subs	r0, r3, r0
   d668c:	3801      	subs	r0, #1
   d668e:	4770      	bx	lr

000d6690 <dynalib_user>:
   d6690:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d66a0:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d66b0:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d66c0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d66d0:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d66e0:	4f4d 4544 7525 003e                         MODE%u>.

000d66e8 <_ZL4font>:
   d66e8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d66f8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6708:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6718:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6728:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6738:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6748:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6758:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6768:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6778:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6788:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6798:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d67a8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d67b8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d67c8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d67d8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d67e8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d67f8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6808:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6818:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6828:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6838:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6848:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6858:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6868:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6878:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6888:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6898:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d68a8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d68b8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d68c8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d68d8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d68e8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d68f8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6908:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6918:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6928:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6938:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6948:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6958:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6968:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6978:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d6988:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6998:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d69a8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d69b8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d69c8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d69d8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d69e8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d69f8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d6a08:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d6a18:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d6a28:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d6a38:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d6a48:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d6a58:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d6a68:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d6a78:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d6a88:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d6a98:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d6aa8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d6ab8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d6ac8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d6ad8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d6ae8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d6af8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d6b08:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d6b18:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d6b28:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d6b38:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d6b48:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d6b58:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d6b68:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d6b78:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d6b88:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d6b98:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d6ba8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d6bb8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d6bc8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d6bd8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000d6be8 <_ZTV12Adafruit_GFX>:
	...
   d6bf8:	4951 000d 5bfd 000d 409d 000d 4359 000d     QI...[...@..YC..
   d6c08:	435b 000d 438d 000d 4369 000d 437b 000d     [C...C..iC..{C..
   d6c18:	429d 000d 4359 000d 4585 000d 44ff 000d     .B..YC...E...D..
   d6c28:	43a5 000d 43e3 000d 441d 000d 4463 000d     .C...C...D..cD..
   d6c38:	4501 000d 447f 000d                         .E...D..

000d6c40 <_ZTV16OledWingAdafruit>:
	...
   d6c48:	4a61 000d 4a81 000d 4951 000d 5bfd 000d     aJ...J..QI...[..
   d6c58:	4c45 000d 4359 000d 435b 000d 438d 000d     EL..YC..[C...C..
   d6c68:	4369 000d 437b 000d 429d 000d 4359 000d     iC..{C...B..YC..
   d6c78:	4585 000d 4dff 000d 5393 000d 5345 000d     .E...M...S..ES..
   d6c88:	441d 000d 4463 000d 4501 000d 447f 000d     .D..cD...E...D..

000d6c98 <_ZTVN8particle11SPISettingsE>:
	...
   d6ca0:	4249 000d 421d 000d 421f 000d               IB...B...B..

000d6cac <_ZL12splash1_data>:
   d6cac:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d6cbc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d6ccc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d6cdc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d6cec:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d6cfc:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d6d14:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d6d24:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d6d34:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d6d44:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d6d54:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d6d64:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d6d74:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d6d84:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d6d94:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d6da4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d6db4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d6dc4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d6dd4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d6de4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d6df4:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d6e04:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d6e14:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d6e24:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d6e3c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d6e54:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d6e64:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d6e74:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d6e84:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d6e94:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d6ea4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d6eb4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d6ec4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d6ed4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d6ee4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d6ef4:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d6f04:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d6f14:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d6f24:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d6f34:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d6f44:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d6f54:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d6f64:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d6f6c <_ZL12splash2_data>:
   d6f6c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d6f7c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d6f8c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d6fa8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d6fb8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d6fc8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d6fd8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d6fe8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d6ff8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7008:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7018:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7028:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7038:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7048:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7058:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7068:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7078:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7088:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7098:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d70a8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d70b8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d70c8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d70d8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d70e8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7100:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7110:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7120:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7130:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7140:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d714c <_ZTV16Adafruit_SSD1306>:
	...
   d7154:	4c19 000d 4c31 000d 4951 000d 5bfd 000d     .L..1L..QI...[..
   d7164:	4c45 000d 4359 000d 435b 000d 438d 000d     EL..YC..[C...C..
   d7174:	4369 000d 437b 000d 429d 000d 4359 000d     iC..{C...B..YC..
   d7184:	4585 000d 4dff 000d 5393 000d 5345 000d     .E...M...S..ES..
   d7194:	441d 000d 4463 000d 4501 000d 447f 000d     .D..cD...E...D..

000d71a4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d71a4:	8000 e0c0 f8f0 fefc                         ........

000d71ac <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d71ac:	0100 0703 1f0f 7f3f                         ......?.

000d71b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d71b4:	d5ae a880                                   ....

000d71b8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d71b8:	00d3 8d40                                   ..@.

000d71bc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d71bc:	0020 c8a1                                    ...

000d71c0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d71c0:	40db a6a4 af2e                              .@....

000d71c6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d71c6:	02da 8f81                                   ....

000d71ca <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d71ca:	12da                                         ...

000d71cd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d71cd:	02da                                         ...

000d71d0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d71d0:	0022 21ff 0000 0000                         "..!....

000d71d8 <_ZTVN5spark13EthernetClassE>:
	...
   d71e0:	59fb 000d 59f1 000d 59e7 000d 59dd 000d     .Y...Y...Y...Y..
   d71f0:	59d1 000d 59c5 000d 6339 000d 6341 000d     .Y...Y..9c..Ac..
   d7200:	59b9 000d 59b1 000d 59a7 000d 599d 000d     .Y...Y...Y...Y..
   d7210:	6371 000d                                   qc..

000d7214 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7214:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7224:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7234:	7361 7463 6d69 0065                         asctime.

000d723c <_ZTV9IPAddress>:
	...
   d7244:	5ea5 000d 5e95 000d 5e97 000d               .^...^...^..

000d7250 <_ZTV9USBSerial>:
	...
   d7258:	5f85 000d 5fed 000d 5fc3 000d 5bfd 000d     ._..._..._...[..
   d7268:	5fb5 000d 5f87 000d 5f97 000d 5fe7 000d     ._..._..._..._..
   d7278:	5fa7 000d 5f81 000d                         ._..._..

000d7280 <_ZTV11USARTSerial>:
	...
   d7288:	60e1 000d 614d 000d 6125 000d 5bfd 000d     .`..Ma..%a...[..
   d7298:	60f5 000d 6111 000d 6103 000d 611f 000d     .`...a...a...a..
   d72a8:	60e3 000d 60e7 000d                         .`...`..

000d72b0 <_ZTV7TwoWire>:
	...
   d72b8:	61dd 000d 6227 000d 61ff 000d 61df 000d     .a..'b...a...a..
   d72c8:	6207 000d 620f 000d 6217 000d 621f 000d     .b...b...b...b..

000d72d8 <_ZTVN5spark9WiFiClassE>:
	...
   d72e0:	62db 000d 62d1 000d 62c7 000d 6289 000d     .b...b...b...b..
   d72f0:	5d11 000d 62bb 000d 6339 000d 6341 000d     .]...b..9c..Ac..
   d7300:	62af 000d 62a7 000d 629d 000d 6293 000d     .b...b...b...b..
   d7310:	6371 000d                                   qc..

000d7314 <_ZTVN5spark12NetworkClassE>:
	...
   d731c:	62f9 000d 6303 000d 630d 000d 6317 000d     .b...c...c...c..
   d732c:	6321 000d 632d 000d 6339 000d 6341 000d     !c..-c..9c..Ac..
   d733c:	6349 000d 6355 000d 635d 000d 6367 000d     Ic..Uc..]c..gc..
   d734c:	6371 000d                                   qc..

000d7350 <_ZSt7nothrow>:
	...

000d7351 <link_const_variable_data_end>:
   d7351:	00          	.byte	0x00
	...

000d7354 <link_constructors_location>:
   d7354:	000d41c5 	.word	0x000d41c5
   d7358:	000d5a05 	.word	0x000d5a05
   d735c:	000d5b75 	.word	0x000d5b75
   d7360:	000d5bd5 	.word	0x000d5bd5
   d7364:	000d5d1d 	.word	0x000d5d1d
   d7368:	000d5d2d 	.word	0x000d5d2d
   d736c:	000d5d55 	.word	0x000d5d55
   d7370:	000d62e5 	.word	0x000d62e5
   d7374:	000d6451 	.word	0x000d6451

000d7378 <link_constructors_end>:
	...
